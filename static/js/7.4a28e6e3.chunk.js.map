{"version":3,"sources":["Components/Body/SpecialProductCard.js","Components/Body/SpecialReservation.js"],"names":["SpecialProductCard","id","name","price","image","description","quantity","changeClickedProductId","quantityChange","useState","menuQuantity","setMenuQuantity","menuQuantityChange","e","console","log","target","className","includes","prevQuantity","Fragment","src","process","alt","style","fontWeight","marginLeft","color","class","onClick","Button","SpecialReservation","availableHours","reservation","setReservation","excludeDates","setExcludeDates","setAvailable","setMessage","startDate","setStartDate","setMaxGuests","specialItem","setSpecialItem","items","setItems","menus","setMenus","useHttpClient","isLoading","error","sendRequest","clearError","stripe","useStripe","history","useHistory","useForm","hour","value","isValid","email","phone","formState","inputHandler","useEffect","day","fetchItems","a","responseData","filteredItems","filter","item","special","length","newMenus","map","i","newMenu","_id","chosen","push","getDay","fetchSpecialReservation","availableDays","reservations","days","availability","available","disabledDates","minDate","disabledDateYear","Date","getFullYear","disabledDateMonth","getMonth","disabledDateDay","getDate","date","dateDay","foundDay","find","message","inputs","availableGuests","h","parseInt","guests","preventDefault","prevItem","background","innerHTML","formSubmitHandler","event","total","line_items","newItem","price_data","currency","unit_amount","product_data","month","year","address","street","local","zipCode","city","JSON","stringify","customer_email","deliveryHour","productName","option","sessionId","redirectToCheckout","customer_phoneNumber","customer_address","customer_items","delivery_info","bonusItemName","timepickerValue","paymentMethod","window","location","reload","itemList","setHourOptions","chosenMenus","menu","ErrorModal","onClear","LoadingSpinner","asOverlay","margin","fontSize","marginBottom","marginTop","minHeight","display","selected","onChange","dateFormat","maxDate","Input","element","label","validators","VALIDATOR_REQUIRE","errorText","onInput","options","type","disabled"],"mappings":"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","file":"static/js/7.4a28e6e3.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport Button from '../FormElements/Button';\r\n\r\n\r\nconst SpecialProductCard = ({ id, name, price, image, description, quantity, changeClickedProductId, quantityChange }) => {\r\n\r\n    const [menuQuantity, setMenuQuantity] = useState(quantity)\r\n\r\n    const menuQuantityChange = (e) => {\r\n        console.log(e.target.className.includes('fa-minus'));\r\n        \r\n        if (e.target.className.includes('fa-minus')) {\r\n            if(menuQuantity > 1) {\r\n                setMenuQuantity(prevQuantity => prevQuantity - 1)\r\n            } else {\r\n                setMenuQuantity(1)\r\n            }\r\n        } else {\r\n            if(menuQuantity < 9) {\r\n                setMenuQuantity(prevQuantity => prevQuantity + 1)\r\n            } else {setMenuQuantity(9)}\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div\r\n            className=\"item-card\"\r\n            >\r\n                <div className=\"item-card__image\">\r\n                <img src={`${process.env.REACT_APP_AWS_URL}/${image}`} alt={name}></img>\r\n                </div>\r\n                <div className=\"item-card__info\">\r\n                <p className=\" name price\">\r\n                    <span style={{fontWeight: \"bold\"}}>{name}</span>\r\n                    <span style={{fontWeight: \"bold\", marginLeft: \"0.7em\"}}>{price} zł</span>\r\n                </p>\r\n                <p className=\"description\">\r\n                    {description}\r\n                </p>\r\n                <div>\r\n                    {/* Wybierz liczbę: <input \r\n                    type='number' \r\n                    id={id} \r\n                    onChange={quantityChange}\r\n                    min={1}\r\n                    value={quantity}\r\n                    /> */}\r\n                    <span style={{color: 'white'}}>Liczba:</span> \r\n                    <span \r\n                    class=\"fas fa-minus item-quantity__handler\"\r\n                    id={id} \r\n                    onClick={(e) => {\r\n                        menuQuantityChange(e)\r\n                        quantityChange(e)\r\n                        }}></span>\r\n                    <span style={{color: 'white'}}>{menuQuantity}</span>\r\n                    <span\r\n                    class=\"fas fa-plus item-quantity__handler\"\r\n                    id={id}\r\n                    onClick={(e) => {\r\n                        menuQuantityChange(e)\r\n                        quantityChange(e)\r\n                        }}></span>\r\n                <Button \r\n                id={id}\r\n                onClick={changeClickedProductId}\r\n                >WYBIERZ</Button>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default SpecialProductCard\r\n","import React, { useState, useEffect } from 'react';\r\nimport \"./SpecialReservation.css\"\r\nimport { useHttpClient } from '../hooks/http-hook';\r\nimport SpecialProductCard from './SpecialProductCard';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { useStripe } from '@stripe/react-stripe-js'\r\nimport Input from '../FormElements/Input';\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MIN, VALIDATOR_MAX } from '../util/validators';\r\nimport { useForm } from '../hooks/form-hook';\r\nimport Button from '../FormElements/Button';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport LoadingSpinner from \"../UIElements/LoadingSpinner\"\r\nimport ErrorModal from \"../UIElements/ErrorModal\"\r\n\r\n\r\nconst SpecialReservation = () => {\r\n\r\n    const [reservation, setReservation] = useState({availableHours: []});\r\n    const [excludeDates, setExcludeDates] = useState([]);\r\n    const [available, setAvailable] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [startDate, setStartDate] = useState();\r\n    // const [startDate, setStartDate] = useState(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 1));\r\n    const [maxGuests, setMaxGuests] = useState(0)\r\n    const [specialItem, setSpecialItem] = useState([]);\r\n    const [items, setItems] = useState([]);\r\n    const [menus, setMenus] = useState([]);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const stripe = useStripe();\r\n\r\n    let history = useHistory();\r\n\r\n    const [formState, inputHandler] = useForm(\r\n        {\r\n            hour: {\r\n              value: '',\r\n              isValid: false\r\n          },\r\n        //   guests: {\r\n        //     value: '',\r\n        //     isValid: false\r\n        // },\r\n          email: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        phone: {\r\n            value: '',\r\n            isValid: false\r\n        }\r\n        },\r\n        false\r\n    );\r\n\r\n    useEffect(() => {\r\n        const fetchItems = async () => {\r\n                try {\r\n                    const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/items/`\r\n                  );\r\n                \r\n                const filteredItems = responseData.items.filter(item => item.special === true)\r\n                setItems(filteredItems)\r\n                \r\n                if (menus.length < 1) {\r\n                    let newMenus = []\r\n                    filteredItems.map(i => {\r\n                        const newMenu = {\r\n                            id: i._id,\r\n                            name: i.name,\r\n                            quantity: 1,\r\n                            price: i.price,\r\n                            chosen: false,\r\n                            description: i.description\r\n                        }\r\n                        return newMenus.push(newMenu)\r\n                    }\r\n                    )\r\n                    setMenus(newMenus)\r\n                }\r\n                } catch (err) {}\r\n            }\r\n            let day\r\n            if (startDate) {\r\n                day = startDate.getDay() - 1\r\n                if (day < 0 ) {\r\n                    day = 6\r\n                }\r\n            }\r\n            const fetchSpecialReservation = async () => {\r\n                try {\r\n                  const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/reservation`\r\n                  );\r\n                  let availableDays = []\r\n                  responseData.reservations[0].days.map(day => {\r\n                      const name = day.name\r\n                      let value\r\n                      if(name === \"Sunday\") {\r\n                          value = 0\r\n                      } else if(name === \"Monday\") {\r\n                        value = 1\r\n                    } else if(name === \"Tuesday\") {\r\n                        value = 2\r\n                    } else if(name === \"Wednesday\") {\r\n                        value = 3\r\n                    } else if(name === \"Thursday\") {\r\n                        value = 4\r\n                    } else if(name === \"Friday\") {\r\n                        value = 5\r\n                    } else if(name === \"Saturday\") {\r\n                        value = 6\r\n                    }\r\n                      const availability = day.available.value\r\n                    return availableDays.push({\r\n                        day: value,\r\n                        available: availability\r\n                    })\r\n                  })\r\n                  let disabledDates = []\r\n                  let minDate = 6\r\n                  availableDays.map(day => {\r\n                    const disabledDateYear = new Date().getFullYear()\r\n                    const disabledDateMonth = new Date().getMonth()\r\n                    const disabledDateDay = new Date().getDate() + 1 + day.day\r\n                    const date = new Date(disabledDateYear, disabledDateMonth, disabledDateDay)\r\n                    const dateDay = date.getDay()\r\n                    const foundDay = availableDays.find(day => day.day === dateDay);\r\n                    if(foundDay.available === true && day.day < minDate) return minDate = day.day\r\n                    if(dateDay === foundDay.day && foundDay.available === false) return disabledDates.push(date)\r\n                })\r\n                if (!startDate) {setStartDate(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 1 + minDate))}\r\n                  setExcludeDates(disabledDates)\r\n                  setAvailable(responseData.reservations[0].days[day].available.value)\r\n                  setMessage(responseData.reservations[0].days[day].available.message)\r\n                  setReservation(responseData.reservations[0].days[day]);\r\n                  if (formState.inputs.hour.isValid) {\r\n                    const availableGuests = responseData.reservations[0].days[day].availableHours.find(h => h.hour === parseInt(formState.inputs.hour.value))\r\n                    setMaxGuests(availableGuests.guests)\r\n                  }\r\n            } catch (err) {}     \r\n        };\r\n        fetchSpecialReservation();\r\n        fetchItems()\r\n        }, [sendRequest, startDate, formState.inputs.hour.isValid, formState.inputs.hour.value] )\r\n\r\n    const changeClickedProductId = (e) => {\r\n            e.preventDefault();\r\n            \r\n            const value = e.target.value\r\n            if (specialItem.includes(value)) {\r\n                setSpecialItem(prevItem => prevItem.filter(i => !(value === i)))\r\n                e.target.style.background = '#b39809'\r\n                e.target.innerHTML = 'WYBIERZ'\r\n                menus[value].chosen = false\r\n            } else {\r\n                setSpecialItem(prevItem => [...prevItem, value])\r\n                e.target.style.background = '#726006'\r\n                e.target.innerHTML = 'WYBRANO'\r\n                menus[value].chosen = true;\r\n        }\r\n        }\r\n\r\n    const quantityChange = (e) => {\r\n        e.preventDefault();\r\n        const newMenus = [...menus]\r\n        if (e.target.className.includes('fa-minus')) {\r\n            if (newMenus[e.target.id].quantity > 1) {\r\n                newMenus[e.target.id].quantity--\r\n            } else newMenus[e.target.id].quantity = 1;\r\n        } else {\r\n            if (newMenus[e.target.id].quantity < 9) {\r\n                newMenus[e.target.id].quantity++\r\n            } else newMenus[e.target.id].quantity = 9;\r\n            \r\n        }\r\n        setMenus(newMenus)\r\n    }\r\n\r\n    const formSubmitHandler = async event => {\r\n        event.preventDefault();\r\n        let total = 0\r\n        let line_items = []\r\n        if (items && menus) {\r\n            menus.map(item => {\r\n                if (item.chosen && event.target.id === 'payment-online') {\r\n                    const newItem = {\r\n                        quantity: item.quantity,\r\n                        price_data: {\r\n                            currency: \"pln\",\r\n                            unit_amount: item.price * 100,\r\n                            product_data: {\r\n                                name: item.name,\r\n                                description: item.description\r\n                        }  \r\n                    }\r\n                    }\r\n                    return line_items.push(newItem)\r\n                } else if (item.chosen && event.target.id === 'payment-offline') {\r\n                    const newItem = {\r\n                        quantity: item.quantity,\r\n                        name: item.name,\r\n                        price: item.price\r\n                    }\r\n                    \r\n                    total = total + (item.price * item.quantity)\r\n                    return line_items.push(newItem)\r\n                }\r\n            })     \r\n        }\r\n        const day = startDate.getDate()\r\n        const month = startDate.getMonth() + 1\r\n        const year = startDate.getFullYear()\r\n        const message = `Data: ${day}/${month}/${year} - Godzina: ${formState.inputs.hour.value}:00`\r\n        // const message = `Data: ${day}/${month}/${year} - Godzina: ${formState.inputs.hour.value}:00 - liczba osób: ${formState.inputs.guests.value}`\r\n        let address = {\r\n            street: '',\r\n            local: '',\r\n            zipCode: '',\r\n            city: '',\r\n            message\r\n        }\r\n        const productName = ''\r\n        // const newAvailable = {\r\n        //     value: true,\r\n        //     message\r\n        //   }\r\n          \r\n        //   const chosenHour = reservation.availableHours.find(hour => hour.hour === parseInt(formState.inputs.hour.value))\r\n        //   chosenHour.guests = chosenHour.guests - parseInt(formState.inputs.guests.value)\r\n        //   let newHours = [\r\n        //       ...reservation.availableHours\r\n        //   ]\r\n        //   try {\r\n        //     await sendRequest(\r\n        //       `${process.env.REACT_APP_BACKEND_URL}/api/reservation/${reservation._id}`,\r\n        //       'PATCH',\r\n        //       JSON.stringify({\r\n        //         available: newAvailable,\r\n        //         availableHours: newHours\r\n        //       }),\r\n        //       {\r\n        //         'Content-Type': 'application/json'\r\n        //       }\r\n        //     );\r\n        //   } catch (err) {}\r\n            if (event.target.id === 'payment-online') {\r\n                try {\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/checkout/`,\r\n                        'POST',\r\n                        JSON.stringify({\r\n                            line_items,\r\n                            customer_email: formState.inputs.email.value,\r\n                            message,\r\n                            deliveryHour: '',\r\n                            phone: formState.inputs.phone.value,\r\n                            address,\r\n                            productName,\r\n                            option: 'reservation'\r\n                        }),\r\n                        {\r\n                          'Content-Type': 'application/json'\r\n                        }\r\n                    );\r\n                    const { sessionId } = responseData\r\n                    await stripe.redirectToCheckout({\r\n                        sessionId\r\n                    })\r\n                } catch (err) {}\r\n              } else if (event.target.id === 'payment-offline') {\r\n                try { \r\n                    await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/mail/`,\r\n                        'POST',\r\n                        JSON.stringify({\r\n                            customer_email: formState.inputs.email.value,\r\n                            customer_phoneNumber: formState.inputs.phone.value,\r\n                            customer_address: address,\r\n                            customer_items: line_items,\r\n                            total,\r\n                            delivery_info: '',\r\n                            bonusItemName: '',\r\n                            timepickerValue: '',\r\n                            paymentMethod: '',\r\n                            message,\r\n                            option: 'reservation'\r\n                        }),\r\n                        {\r\n                          'Content-Type': 'application/json'\r\n                        }\r\n                    );\r\n                    await history.push(\"/success-reservation\")\r\n                    window.location.reload()\r\n                  } catch (err) {}\r\n              }\r\n      };\r\n    const itemList = items.map((i, id) => {\r\n            let quantity\r\n            if (menus.length > 0) {\r\n                quantity = menus[id].quantity\r\n            }\r\n            return (<SpecialProductCard key={id} id={id} name={i.name} price={i.price} description={i.description} image={i.image} changeClickedProductId={changeClickedProductId} quantityChange={quantityChange} quantity={quantity ? quantity : 1}\r\n                />)\r\n            })\r\n   \r\n    const filteredHours = reservation.availableHours.filter(i => !(i.guests === 0))\r\n    const setHourOptions = filteredHours.map(i => <option value={i.hour}>{i.hour}:00</option>)\r\n    const chosenMenus = menus.map(menu => {\r\n            if (menu.chosen) return (<p style={{color: 'white'}}>\r\n                {menu.name} - Ilość: {menu.quantity} - Cena: {menu.price * menu.quantity} zł\r\n            </p>)\r\n        })\r\n\r\n    return (\r\n        <div className=\"special\">\r\n        <ErrorModal error={error} onClear={clearError} />\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <div>\r\n        {items.length > 0 && \r\n            <div className=\"special-items\">\r\n            <h1\r\n            >Wybierz menu i zarezerwuj stolik</h1>\r\n            {itemList}\r\n            </div>\r\n            }\r\n            {specialItem.length > 0 && <form\r\n            className=\"special-reservation\">\r\n                <h2 style={{margin: '0'}}\r\n                >Uzupełnij dane:</h2>\r\n                <p style={{fontWeight: 'bold', fontSize: '1.2em'}}>Wybrano:</p>\r\n                {menus && chosenMenus}\r\n            <label style={{\r\n                fontWeight: 'bold', \r\n                marginBottom: '0.5em', \r\n                marginTop: '2em', \r\n                minHeight: '28px',\r\n                display: 'block'\r\n                }}>Wybierz datę:</label>\r\n            <DatePicker \r\n            id=\"date\"\r\n            selected={startDate}\r\n            onChange={(date) => {\r\n                setStartDate(date)\r\n                formState.inputs.hour.value = ''\r\n                formState.inputs.hour.isValid = false\r\n                // formState.inputs.guests.value = ''\r\n                // formState.inputs.guests.isValid = false\r\n                setMaxGuests(0)\r\n            }}\r\n            excludeDates={\r\n                excludeDates\r\n            }\r\n            dateFormat='dd/MM/yyyy' \r\n            minDate={new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 1)}\r\n            maxDate={new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 7)}\r\n            />\r\n            <Input \r\n                id=\"hour\"\r\n                element=\"select\"\r\n                name=\"select\"\r\n                label=\"Wybierz godzinę:\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Proszę wybrać godzinę.\"\r\n                onInput={inputHandler}\r\n                options={setHourOptions}\r\n            />\r\n            {/* <Input \r\n                id=\"guests\"\r\n                element=\"input\"\r\n                type=\"number\"\r\n                label={`Wybierz liczbę osób: \r\n                ${maxGuests > 0 && formState.inputs.hour.isValid ? `(na godzinę ${formState.inputs.hour.value}:00 maksymalna liczba osób - ${maxGuests})`: ''}`}\r\n                validators={[VALIDATOR_MIN(0), VALIDATOR_MAX(maxGuests)]}\r\n                errorText={`Nieprawidłowa liczba osób`}\r\n                onInput={inputHandler}\r\n            /> */}\r\n            <Input \r\n                id=\"email\"\r\n                element=\"input\"\r\n                type=\"email\"\r\n                label=\"Podaj email:\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Nieprawidłowy email.\"\r\n                onInput={inputHandler}\r\n            />\r\n            <Input \r\n                id=\"phone\"\r\n                element=\"input\"\r\n                type=\"text\"\r\n                label=\"Podaj nr telefonu:\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Nieprawidłowy nr telefonu.\"\r\n                onInput={inputHandler}\r\n            />\r\n            <Button\r\n                id=\"payment-offline\"\r\n                onClick={formSubmitHandler}\r\n                disabled={startDate && (!formState.isValid || \r\n                    !formState.inputs.hour.isValid || \r\n                    // !formState.inputs.guests.isValid || \r\n                    // formState.inputs.guests.value === '0' || \r\n                    specialItem.length <= 0)}\r\n            >\r\n                Zapłać na miejscu\r\n                </Button>\r\n            <Button\r\n                id=\"payment-online\"\r\n                onClick={formSubmitHandler}\r\n                disabled={startDate && (!formState.isValid || \r\n                    !formState.inputs.hour.isValid || \r\n                    // !formState.inputs.guests.isValid || \r\n                    // formState.inputs.guests.value === '0' || \r\n                    specialItem.length <= 0)}\r\n            >\r\n                Zapłać online\r\n                </Button>\r\n            </form>}\r\n        </div>\r\n            {/* {!available && <div>\r\n                <h2 style={{marginTop: \"5em\"}}>{message ? message : 'Brak możliwości rezerwacji'}</h2>\r\n            </div>} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SpecialReservation\r\n"],"sourceRoot":""}