{"version":3,"sources":["Components/Body/SpecialProductCard.js","Components/Body/SpecialReservation.js"],"names":["SpecialProductCard","id","name","price","image","description","specialItemCheckedId","changeClickedProductId","Fragment","className","src","process","alt","style","fontWeight","marginLeft","Button","onClick","isClicked","toString","SpecialReservation","useState","reservation","setReservation","available","setAvailable","message","setMessage","Date","getFullYear","getMonth","getDate","startDate","setStartDate","maxGuests","setMaxGuests","setSpecialItemCheckedId","items","setItems","useHttpClient","isLoading","error","sendRequest","clearError","stripe","useStripe","formElements","useRef","useForm","hour","value","isValid","guests","email","phone","formState","inputHandler","useEffect","day","fetchItems","a","responseData","filteredItems","filter","item","special","getDay","console","log","fetchSpecialReservation","reservations","days","availableHours","inputs","availableGuests","find","h","parseInt","e","preventDefault","target","current","scrollIntoView","behavior","block","formSubmitHandler","event","line_items","quantity","price_data","currency","unit_amount","product_data","month","year","address","street","local","zipCode","city","productName","JSON","stringify","customer_email","deliveryHour","option","sessionId","redirectToCheckout","setHourOptions","map","i","ErrorModal","onClear","LoadingSpinner","asOverlay","length","item_list","sort","b","itemList","ref","onSubmit","margin","marginBottom","minHeight","display","selected","onChange","date","dateFormat","minDate","maxDate","Input","element","label","validators","VALIDATOR_REQUIRE","errorText","onInput","options","type","VALIDATOR_MIN","VALIDATOR_MAX","disabled","marginTop"],"mappings":"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","file":"static/js/7.a0e3f83c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '../FormElements/Button';\r\n\r\n\r\nconst SpecialProductCard = ({ id, name, price, image, description, specialItemCheckedId, changeClickedProductId }) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div\r\n            className=\"item-card\"\r\n            >\r\n                <div className=\"item-card__image\">\r\n                <img src={`${process.env.REACT_APP_AWS_URL}/${image}`} alt={name}></img>\r\n                </div>\r\n                <div className=\"item-card__info\">\r\n                <p className=\" name price\">\r\n                    <span style={{fontWeight: \"bold\"}}>{name}</span>\r\n                    <span style={{fontWeight: \"bold\", marginLeft: \"0.7em\"}}>{price} z≈Ç</span>\r\n                </p>\r\n                <p className=\"description\">\r\n                    {description}\r\n                </p>\r\n                <Button \r\n                id={id}\r\n                onClick={changeClickedProductId}\r\n                isClicked={id.toString() === specialItemCheckedId}\r\n                >WYBIERZ</Button>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default SpecialProductCard\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport \"./SpecialReservation.css\"\r\nimport { useHttpClient } from '../hooks/http-hook';\r\nimport SpecialProductCard from './SpecialProductCard';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { useStripe } from '@stripe/react-stripe-js'\r\nimport Input from '../FormElements/Input';\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MIN, VALIDATOR_MAX } from '../util/validators';\r\nimport { useForm } from '../hooks/form-hook';\r\nimport Button from '../FormElements/Button';\r\n\r\nimport LoadingSpinner from \"../UIElements/LoadingSpinner\"\r\nimport ErrorModal from \"../UIElements/ErrorModal\"\r\n\r\nconst SpecialReservation = () => {\r\n\r\n    const [reservation, setReservation] = useState([]);\r\n    const [available, setAvailable] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [startDate, setStartDate] = useState(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 1));\r\n    const [maxGuests, setMaxGuests] = useState(0)\r\n    const [specialItemCheckedId, setSpecialItemCheckedId] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const stripe = useStripe();\r\n    const formElements = useRef()\r\n\r\n    const [formState, inputHandler] = useForm(\r\n        {\r\n            hour: {\r\n              value: '',\r\n              isValid: false\r\n          },\r\n          guests: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n          email: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        phone: {\r\n            value: '',\r\n            isValid: false\r\n        }\r\n        },\r\n        false\r\n    );\r\n\r\n    useEffect(() => {\r\n        // window.scrollTo(0, 0)\r\n        const fetchItems = async () => {\r\n                try {\r\n                    const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/items/`\r\n                  );\r\n                \r\n                  const filteredItems = responseData.items.filter(item => item.special === true)\r\n                setItems(filteredItems)\r\n                } catch (err) {}\r\n            }\r\n            let day\r\n            if (startDate) {\r\n                day = startDate.getDay() - 1\r\n                if (day < 0 ) {\r\n                    day = 6\r\n                }\r\n            }\r\n            console.log(day);\r\n            \r\n            const fetchSpecialReservation = async () => {\r\n                try {\r\n                  const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/reservation`\r\n                  );\r\n                  setAvailable(responseData.reservations[0].available.value)\r\n                  setMessage(responseData.reservations[0].available.message)\r\n                  \r\n                  setReservation(responseData.reservations[0].days[day].availableHours);\r\n                  if (formState.inputs.hour.isValid) {\r\n                    const availableGuests = responseData.reservations[0].days[day].availableHours.find(h => h.hour === parseInt(formState.inputs.hour.value))\r\n                    setMaxGuests(availableGuests.guests)\r\n                  }\r\n            } catch (err) {}     \r\n        };\r\n        fetchSpecialReservation();\r\n            fetchItems()\r\n        }, [sendRequest, startDate, formState.inputs.hour.isValid, formState.inputs.hour.value] )\r\n\r\n        const changeClickedProductId = (e) => {\r\n            e.preventDefault();\r\n            if (specialItemCheckedId === e.target.value) {\r\n                return setSpecialItemCheckedId(false)\r\n            } else {\r\n            setSpecialItemCheckedId(e.target.value)\r\n            formElements.current.scrollIntoView({ behavior: 'smooth', block: 'start' })\r\n        }\r\n        }\r\n\r\n        const itemList = () => {\r\n            let item_list\r\n            let sortItems\r\n            if(items.length > 0) {\r\n                sortItems = items.sort((a, b) => a.name > b.name ? 1 : -1)\r\n                item_list = sortItems.map((i, id) => {\r\n                return (<SpecialProductCard key={id} id={id} name={i.name} price={i.price} description={i.description} image={i.image} changeClickedProductId={changeClickedProductId} specialItemCheckedId={specialItemCheckedId} />)\r\n                })\r\n            } return item_list\r\n        }\r\n\r\n        const formSubmitHandler = async event => {\r\n            event.preventDefault();\r\n            \r\n            let line_items\r\n            if (items && specialItemCheckedId) {\r\n                line_items = \r\n                    [{\r\n                        quantity: 1,\r\n                        price_data: {\r\n                            currency: \"pln\",\r\n                            unit_amount: items[specialItemCheckedId].price * 100,\r\n                            product_data: {\r\n                                name: items[specialItemCheckedId].name,\r\n                                description: items[specialItemCheckedId].description\r\n                        }  \r\n                    }\r\n                }]\r\n            }\r\n            const day = startDate.getDate()\r\n            const month = startDate.getMonth() + 1\r\n            const year = startDate.getFullYear()\r\n            const message = `Data: ${day}/${month}/${year} - Godzina: ${formState.inputs.hour.value}:00 - liczba os√≥b: ${formState.inputs.guests.value}`\r\n            let address = {\r\n                street: '',\r\n                local: '',\r\n                zipCode: '',\r\n                city: '',\r\n                message\r\n            }\r\n            const productName = items[specialItemCheckedId].name\r\n                try {\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/checkout/`,\r\n                        'POST',\r\n                        JSON.stringify({\r\n                            line_items,\r\n                            customer_email: formState.inputs.email.value,\r\n                            message,\r\n                            deliveryHour: '',\r\n                            phone: formState.inputs.phone.value,\r\n                            address,\r\n                            productName,\r\n                            option: 'reservation'\r\n                        }),\r\n                        {\r\n                          'Content-Type': 'application/json'\r\n                        }\r\n                    );\r\n                    const { sessionId } = responseData\r\n                    await stripe.redirectToCheckout({\r\n                        sessionId\r\n                    })\r\n                } catch (err) {}\r\n            \r\n          };\r\n\r\n        const setHourOptions = reservation.map(i => <option value={i.hour}>{i.hour}:00</option>)\r\n\r\n    return (\r\n        <div className=\"special\">\r\n        <ErrorModal error={error} onClear={clearError} />\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        {available && <div>\r\n        {items.length > 0 && \r\n            <div className=\"special-items\">\r\n            <h1>Wybierz produkt i zarezerwuj stolik</h1>\r\n            {itemList()}\r\n            </div>\r\n            }\r\n            <div ref={formElements}></div>\r\n            {specialItemCheckedId && <form\r\n            onSubmit={formSubmitHandler}\r\n            className=\"special-reservation\">\r\n                <h2 style={{margin: '0'}}>Uzupe≈Çnij dane:</h2>\r\n                <p style={{margin: '0.5em 0 1em 0'}}>Wybrano: {specialItemCheckedId && items[specialItemCheckedId].name}</p>\r\n            <label style={{\r\n                fontWeight: 'bold', \r\n                marginBottom: '0.5em', \r\n                minHeight: '28px',\r\n                display: 'block'\r\n                }}>Wybierz datƒô:</label>\r\n            <DatePicker \r\n            id=\"date\"\r\n            selected={startDate} \r\n            onChange={(date) => {\r\n                setStartDate(date)\r\n                formState.inputs.hour.value = ''\r\n                formState.inputs.hour.isValid = false\r\n                formState.inputs.guests.value = ''\r\n                formState.inputs.guests.isValid = false\r\n                setMaxGuests(0)\r\n            }}\r\n            dateFormat='dd/MM/yyyy' \r\n            minDate={new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 1)}\r\n            maxDate={new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 10)}\r\n            />\r\n            <Input \r\n                id=\"hour\"\r\n                element=\"select\"\r\n                name=\"select\"\r\n                label=\"Wybierz godzinƒô:\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Proszƒô wybraƒá godzinƒô.\"\r\n                onInput={inputHandler}\r\n                options={setHourOptions}\r\n            />\r\n            <Input \r\n                id=\"guests\"\r\n                element=\"input\"\r\n                type=\"number\"\r\n                label={`Wybierz liczbƒô os√≥b: \r\n                ${maxGuests > 0 && formState.inputs.hour.isValid ? `(na godzinƒô ${formState.inputs.hour.value}:00 maksymalna liczba os√≥b - ${maxGuests})`: ''}`}\r\n                validators={[VALIDATOR_MIN(0), VALIDATOR_MAX(maxGuests)]}\r\n                errorText={`Nieprawid≈Çowa liczba os√≥b`}\r\n                onInput={inputHandler}\r\n                options={setHourOptions}\r\n            />\r\n            <Input \r\n                id=\"email\"\r\n                element=\"input\"\r\n                type=\"email\"\r\n                label=\"Podaj email:\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Nieprawid≈Çowy email.\"\r\n                onInput={inputHandler}\r\n            />\r\n            <Input \r\n                id=\"phone\"\r\n                element=\"input\"\r\n                type=\"text\"\r\n                label=\"Podaj nr telefonu:\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Nieprawid≈Çowy nr telefonu.\"\r\n                onInput={inputHandler}\r\n            />\r\n            <Button\r\n                type=\"submit\"\r\n                disabled={startDate && (!formState.isValid || !formState.inputs.hour.isValid || !formState.inputs.guests.isValid)}\r\n            >\r\n                Zarezerwuj i Zap≈Çaƒá\r\n                </Button>\r\n            </form>}\r\n        </div>}\r\n            {!available && <div>\r\n                <h2 style={{marginTop: \"5em\"}}>{message ? message : 'Brak mo≈ºliwo≈õci rezerwacji'}</h2>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SpecialReservation\r\n"],"sourceRoot":""}