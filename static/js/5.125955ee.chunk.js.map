{"version":3,"sources":["Components/Body/Order.js"],"names":["Order","useHttpClient","isLoading","error","sendRequest","clearError","useState","deliveryPrice","setDeliveryPrice","timepickerValue","setTimepickerValue","minTime","setMinTime","maxTime","setMaxTime","isToLateToOrder","setIsToLateToOrder","paymentOffline","setPaymentOffline","minBonusDeliveryPrice","setMinBonusDeliveryPrice","minBonusItemsPrice","setMinBonusItemsPrice","deliveryHours","setDeliveryHours","stripe","useStripe","history","useHistory","useDate","today","dayId","currentHour","currentMinute","useContext","CartContext","cartItems","total","bonusItem","useEffect","window","scrollTo","getDeliveryPrice","a","process","responseData","delivery_price","value","getDeliveryHours","time","getBonusItemsPrice","bonus_items_price","getBonusDeliveryPrice","bonus_delivery_price","minOrderTime","maxOrderTime","currentDay","find","_id","startHour","start","hour","startMinute","minute","endHour","end","endMinute","toString","Date","useForm","street","isValid","local","apartament","zipCode","city","email","phoneNumber","message","formState","inputHandler","formSubmitHandler","event","preventDefault","customer_items","map","i","quantity","name","price","line_items","price_data","currency","unit_amount","product_data","description","push","item","address","inputs","target","id","JSON","stringify","customer_email","deliveryHour","phone","productName","option","sessionId","redirectToCheckout","paymentMethod","delivery_info","totalAmount","bonusItemName","customer_phoneNumber","customer_address","location","reload","Fragment","asOverlay","onClear","className","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValid","style","position","VALIDATOR_EMAIL","fontWeight","marginBottom","minHeight","placeholder","format","step","min","max","onChange","e","hours","minutes","getHours","getMinutes","disabled","onClick","prevPayment","isClicked","margin","payment","color"],"mappings":"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","file":"static/js/5.125955ee.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport \"./Order.css\"\r\nimport Button from '../FormElements/Button'\r\nimport LoadingSpinner from \"../UIElements/LoadingSpinner\"\r\nimport { useHttpClient } from '../hooks/http-hook';\r\nimport ErrorModal from \"../UIElements/ErrorModal\";\r\nimport { CartContext } from '../../context/cart-context';\r\nimport Card from '../UIElements/Card';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useStripe } from '@stripe/react-stripe-js'\r\nimport { TimePickerComponent } from '@syncfusion/ej2-react-calendars'\r\nimport { useDate } from '../hooks/date-hook';\r\n\r\nimport {\r\n    VALIDATOR_REQUIRE,\r\n    VALIDATOR_EMAIL\r\n  } from '../util/validators';\r\n  import Input from '../FormElements/Input';\r\n\r\nimport { useForm } from \"../hooks/form-hook\"\r\n\r\nconst Order = () => {\r\n    \r\n\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    \r\n    const [deliveryPrice, setDeliveryPrice] = useState(false);\r\n    const [timepickerValue, setTimepickerValue] = useState('nie okre≈õlono');\r\n    const [minTime, setMinTime] = useState();\r\n    const [maxTime, setMaxTime] = useState();\r\n    const [isToLateToOrder, setIsToLateToOrder] = useState(false);\r\n    const [paymentOffline, setPaymentOffline] = useState(false);\r\n    const [minBonusDeliveryPrice, setMinBonusDeliveryPrice] = useState(false);\r\n    const [minBonusItemsPrice, setMinBonusItemsPrice] = useState(false);\r\n\r\n    const [deliveryHours, setDeliveryHours] = useState(false);\r\n    const stripe = useStripe();\r\n    let history = useHistory();\r\n    \r\n    const { today, dayId, currentHour, currentMinute } = useDate();\r\n    const { cartItems, total, bonusItem } = useContext(CartContext);\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n            const getDeliveryPrice = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/delivery/${process.env.REACT_APP_DELIVERY_PRICE_ID}`\r\n                      );\r\n                      setDeliveryPrice(responseData.delivery_price.value);\r\n                } catch (err) {}\r\n            }\r\n            const getDeliveryHours = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/time/`\r\n                  );\r\n                \r\n                  setDeliveryHours(responseData.time)\r\n                } catch (err) {}\r\n            } \r\n            const getBonusItemsPrice = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/bonus-items/${process.env.REACT_APP_BONUS_ITEMS_PRICE_ID}`\r\n                      );\r\n                      setMinBonusItemsPrice(responseData.bonus_items_price.value);\r\n                } catch (err) {}\r\n            }\r\n            const getBonusDeliveryPrice = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/bonus-delivery/${process.env.REACT_APP_BONUS_DELIVERY_PRICE_ID}`\r\n                      );\r\n                      setMinBonusDeliveryPrice(responseData.bonus_delivery_price.value);\r\n                } catch (err) {}\r\n            }\r\n            getDeliveryPrice()\r\n            getDeliveryHours()\r\n            getBonusItemsPrice()\r\n            getBonusDeliveryPrice()\r\n    }, [sendRequest])\r\n\r\n    useEffect(() => {\r\n        let minOrderTime\r\n        let maxOrderTime\r\n        if(deliveryHours && today && dayId && currentHour && currentMinute) {\r\n            const currentDay = deliveryHours.find(time => time._id === dayId)\r\n            const startHour = currentDay.time.start.hour\r\n            let startMinute = currentDay.time.start.minute\r\n            const endHour = currentDay.time.end.hour\r\n            let endMinute = currentDay.time.end.minute\r\n\r\n            if (currentDay.time.start.minute < 10) {\r\n                startMinute = currentDay.time.start.minute + '0'\r\n            } else {\r\n                startMinute = currentDay.time.start.minute\r\n            }\r\n\r\n            if (currentDay.time.end.minute < 10) {\r\n                endMinute = currentDay.time.end.minute + '0'\r\n            } else {\r\n                endMinute = currentDay.time.end.minute\r\n            }\r\n            \r\n            maxOrderTime = (endHour + ':' + endMinute).toString()\r\n            \r\n            \r\n            if(currentHour > startHour) {\r\n                if(currentMinute > 45) {\r\n                    minOrderTime = (currentHour + 2 + ':00').toString()\r\n                } else if (currentMinute > 30) {\r\n                    minOrderTime = (currentHour + 1 + ':45').toString()\r\n                } else if (currentMinute > 15) {\r\n                    minOrderTime = (currentHour + 1 + ':30').toString()\r\n                } else {\r\n                    minOrderTime = (currentHour + 1 + ':15').toString()\r\n                }\r\n                \r\n            } else if (currentHour === startHour && currentMinute > startMinute) {\r\n                if(currentMinute > 45) {\r\n                    minOrderTime = (currentHour + 2 + ':00').toString()\r\n                } else if (currentMinute > 30) {\r\n                    minOrderTime = (currentHour + 1 + ':45').toString()\r\n                } else if (currentMinute > 15) {\r\n                    minOrderTime = (currentHour + 1 + ':30').toString()\r\n                } else {\r\n                    minOrderTime = (currentHour + 1 + ':15').toString()\r\n                }\r\n            } else minOrderTime = (startHour + 1 + ':' + startMinute).toString()\r\n\r\n            if(currentHour >= endHour || (currentHour === (endHour - 1) && (currentMinute > endMinute )) ) {\r\n                setIsToLateToOrder(true)\r\n            }\r\n        }\r\n            if(minOrderTime && maxOrderTime) {\r\n                setMinTime(new Date(`8/3/2017 ${minOrderTime}`))\r\n                setMaxTime(new Date(`8/3/2017 ${maxOrderTime}`))\r\n            }\r\n    }, [deliveryHours, today, dayId, currentHour, currentMinute])\r\n\r\n    const [formState, inputHandler] = useForm(\r\n        {\r\n            street: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n            local: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n            apartament: {\r\n                value: null,\r\n                isValid: true\r\n        },\r\n            zipCode: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n            city: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n            email: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n            phoneNumber: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n        message: {\r\n            value: null,\r\n            isValid: true\r\n        },\r\n        },\r\n        false\r\n      );\r\n\r\n    const formSubmitHandler = async event => {\r\n        event.preventDefault();\r\n        \r\n        let customer_items = cartItems.map(i => {\r\n            return {\r\n                quantity: i.quantity,\r\n                name: i.name,\r\n                price: i.price\r\n            }\r\n        })\r\n        let line_items\r\n        if (cartItems && deliveryPrice) {\r\n            line_items = cartItems.map(i => {\r\n                return {\r\n                    quantity: i.quantity,\r\n                    price_data: {\r\n                        currency: \"pln\",\r\n                        unit_amount: i.price * 100,\r\n                        product_data: {\r\n                            name: i.name,\r\n                            description: i.description\r\n                        }\r\n                    }  \r\n                }\r\n            })\r\n    \r\n            const delivery_price = {\r\n                quantity: 1,\r\n                price_data: {\r\n                    currency: \"pln\",\r\n                    unit_amount: deliveryPrice * 100,\r\n                    product_data: {\r\n                        name: 'op≈Çata za dow√≥z'\r\n                    }\r\n                }  \r\n            }\r\n\r\n            if (total <= minBonusDeliveryPrice) {\r\n                line_items.push(delivery_price)\r\n            }\r\n            \r\n            if (total >= minBonusItemsPrice && bonusItem) {\r\n                line_items.push({\r\n                    quantity: 1,\r\n                    price_data: {\r\n                        currency: \"pln\",\r\n                        unit_amount: 0 * 100,\r\n                        product_data: {\r\n                            name: bonusItem.item + \" gratis\"\r\n                        }}})\r\n            }\r\n        }\r\n        \r\n        let address = {\r\n            street: formState.inputs.street.value,\r\n            local: formState.inputs.local.value,\r\n            zipCode: formState.inputs.zipCode.value,\r\n            city: formState.inputs.city.value\r\n        }\r\n        if (!!formState.inputs.apartament.value) {\r\n            address = {\r\n                ...address,\r\n                apartament: formState.inputs.apartament.value\r\n            }\r\n        } else {\r\n            address = {\r\n                ...address,\r\n                apartament: false\r\n            }\r\n        }\r\n        let message\r\n        if (!!formState.inputs.message.value) {\r\n            message = formState.inputs.message.value\r\n        } else {\r\n            message = 'brak'\r\n        }\r\n        if (event.target.id === \"payment-online\" && !isToLateToOrder) {\r\n            try {\r\n                const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/checkout/`,\r\n                    'POST',\r\n                    JSON.stringify({\r\n                        line_items,\r\n                        customer_email: formState.inputs.email.value,\r\n                        message,\r\n                        deliveryHour: timepickerValue.toString(),\r\n                        phone: formState.inputs.phoneNumber.value,\r\n                        address,\r\n                        productName: '',\r\n                        option: 'order'\r\n                    }),\r\n                    {\r\n                      'Content-Type': 'application/json'\r\n                    }\r\n                );\r\n                const { sessionId } = responseData\r\n                await stripe.redirectToCheckout({\r\n                    sessionId\r\n                })\r\n            } catch (err) {}\r\n        } else if (event.target.id === \"payment-offline\" && !isToLateToOrder) {\r\n\r\n            let delivery_info\r\n            let totalAmount\r\n            const paymentMethod = event.target.name\r\n            if (total && deliveryPrice && total <= minBonusDeliveryPrice ) {\r\n                delivery_info = deliveryPrice + \"z≈Ç\"\r\n                totalAmount = total + deliveryPrice\r\n            } else {\r\n                delivery_info = \"dostawa gratis\"\r\n                totalAmount = total\r\n            }\r\n            let bonusItemName = 'brak'\r\n            if(bonusItem && total > minBonusItemsPrice ) {\r\n                bonusItemName = bonusItem.item\r\n            }\r\n            \r\n            try { \r\n                await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/mail/`,\r\n                    'POST',\r\n                    JSON.stringify({\r\n                        customer_email: formState.inputs.email.value,\r\n                        customer_phoneNumber: formState.inputs.phoneNumber.value,\r\n                        customer_address: address,\r\n                        customer_items,\r\n                        message,\r\n                        total: totalAmount,\r\n                        delivery_info,\r\n                        bonusItemName,\r\n                        timepickerValue,\r\n                        paymentMethod,\r\n                        option: 'order'\r\n                    }),\r\n                    {\r\n                      'Content-Type': 'application/json'\r\n                    }\r\n                );\r\n                await history.push(\"/success\")\r\n                window.location.reload()\r\n              } catch (err) {}\r\n        } \r\n      };\r\n\r\n    const handleTimeValue = (e) => {\r\n        let hours\r\n        let minutes\r\n        if (e.target.value) {\r\n            hours = e.target.value.getHours()\r\n            minutes = e.target.value.getMinutes()\r\n            if (minutes < 10) {\r\n                minutes = '0' + e.target.value.getMinutes()\r\n            }\r\n            setTimepickerValue(hours + ':' + minutes)\r\n        } else {setTimepickerValue('nie okre≈õlono')}\r\n      }\r\n\r\n    const handleOfflinePayment = (e) => {\r\n        e.preventDefault();\r\n        setPaymentOffline(prevPayment => !prevPayment)\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <ErrorModal error={error} onClear={clearError} />\r\n        <div className=\"order\">\r\n                <h1>Uzupe≈Çnij dane do zam√≥wienia</h1>\r\n                <Card>\r\n                {!isToLateToOrder &&  \r\n                <form\r\n                >\r\n                    <div className=\"address-street\">\r\n                    <Input \r\n                    id=\"street\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Ulica\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Wprowad≈∫ poprawnƒÖ nazwƒô ulicy.\"\r\n                    onInput={inputHandler}\r\n                    />\r\n                    <Input \r\n                    id=\"local\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Nr lokalu\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Podaj poprawny nr lokalu.\"\r\n                    onInput={inputHandler}\r\n                    />\r\n                    <Input \r\n                    id=\"apartament\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Nr mieszkania\"\r\n                    validators={null}\r\n                    initialValid={true}\r\n                    onInput={inputHandler}\r\n                    />\r\n                    </div>\r\n                    <div className=\"address-city\">\r\n                        <div className=\"address-city__zip\" style={{position: 'relative'}}>\r\n                            <div className=\"address-city__zip-input\">\r\n                            <Input \r\n                                id=\"zipCode\"\r\n                                element=\"input\"\r\n                                type=\"text\"\r\n                                label=\"Kod pocztowy\"\r\n                                validators={[VALIDATOR_REQUIRE()]}\r\n                                errorText={\"Podaj poprawny kod pocztowy.\"}\r\n                                onInput={inputHandler}\r\n                            />\r\n                            </div>\r\n                        </div>\r\n                    <div className=\"address-city__city\">\r\n                    <Input \r\n                    id=\"city\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Miasto\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Podaj poprawnƒÖ nazwƒô miasta.\"\r\n                    onInput={inputHandler}\r\n                    />\r\n                    </div>\r\n                    \r\n                    </div>\r\n                    <Input \r\n                    id=\"email\"\r\n                    element=\"input\"\r\n                    type=\"email\"\r\n                    label=\"Email\"\r\n                    validators={[VALIDATOR_REQUIRE(), VALIDATOR_EMAIL]}\r\n                    errorText=\"Podaj poprawny email.\"\r\n                    onInput={inputHandler}\r\n                    />\r\n                    <Input \r\n                    id=\"phoneNumber\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Numer telefonu\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Podaj nr telefonu.\"\r\n                    onInput={inputHandler}\r\n                    />\r\n                    <Input \r\n                    id=\"message\"\r\n                    element=\"textarea\"\r\n                    type=\"text\"\r\n                    label=\"Komentarz do dostawcy\"\r\n                    validators={null}\r\n                    initialValid={true}\r\n                    onInput={inputHandler}\r\n                    />\r\n                    <label style={{fontWeight: 'bold', marginBottom: '0.5rem', minHeight: '28px'}}>Wybierz oczekiwany czas dowozu:</label>\r\n                    <div className='timepicker'>\r\n                    <TimePickerComponent\r\n                    placeholder=\"wybierz godzinƒô\"\r\n                    format=\"HH:mm\"\r\n                    step={15}\r\n                    min={minTime}\r\n                    max={maxTime}\r\n                    onChange={handleTimeValue}\r\n                    ></TimePickerComponent>\r\n                    </div>\r\n                    <div>\r\n                    <Button\r\n                    disabled={!formState.isValid || isToLateToOrder}\r\n                    id=\"payment-offline\"\r\n                    onClick={handleOfflinePayment}\r\n                    isClicked={paymentOffline}\r\n                    >\r\n                    P≈ÅATNO≈öƒÜ PRZY ODBIORZE\r\n                    </Button>\r\n                    <Button\r\n                    disabled={!formState.isValid || isToLateToOrder || paymentOffline}\r\n                    id=\"payment-online\"\r\n                    onClick={formSubmitHandler}\r\n                    >\r\n                    P≈ÅATNO≈öƒÜ ONLINE\r\n                    </Button>\r\n                    </div>\r\n                    {paymentOffline && <div style={{margin: '1em'}}>\r\n                    <Button\r\n                    disabled={!formState.isValid || isToLateToOrder}\r\n                    id=\"payment-offline\"\r\n                    payment=\"karta\"\r\n                    onClick={formSubmitHandler}\r\n                    >\r\n                    P≈ÅATNO≈öƒÜ KARTƒÑ\r\n                    </Button>\r\n                    <Button\r\n                    disabled={!formState.isValid || isToLateToOrder}\r\n                    id=\"payment-offline\"\r\n                    payment=\"got√≥wka\"\r\n                    onClick={formSubmitHandler}\r\n                    >\r\n                    P≈ÅATNO≈öƒÜ GOT√ìWKƒÑ\r\n                    </Button>\r\n                    </div>}\r\n                </form>}\r\n                {isToLateToOrder && <p style={{color: 'red'}}>Dzi≈õ ju≈º nie dowozimy, zapraszamy ponownie.</p>}\r\n                </Card>\r\n        </div>\r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport default Order\r\n"],"sourceRoot":""}