{"version":3,"sources":["Components/Body/Cart.js"],"names":["Cart","useState","valid","message","orderValid","setOrderValid","useHttpClient","isLoading","error","sendRequest","clearError","minOrderValue","setMinOrderValue","deliveryHours","setDeliveryHours","deliveryPrice","setDeliveryPrice","minBonusDeliveryPrice","setMinBonusDeliveryPrice","minBonusItemsPrice","setMinBonusItemsPrice","bonusItemCheckedId","setBonusItemCheckedId","constant","own","tipIsClicked","setTipIsClicked","bonusItems","setBonusItems","useContext","CartContext","cartItems","removeProduct","increase","decrease","total","addBonusItem","bonusItem","addTip","removeTip","tip","useDate","today","dayId","currentHour","currentMinute","useEffect","window","scrollTo","getMinOrderValue","a","process","responseData","value","getDeliveryHours","time","getDeliveryPrice","delivery_price","getBonusItems","getBonusItemsPrice","bonus_items_price","getBonusDeliveryPrice","bonus_delivery_price","orderValidation","currentDay","find","_id","endHour","end","hour","endMinute","minute","available","useForm","isValid","formState","inputHandler","changeBonusItem","e","target","id","tipButtonHandler","newTipIsClicked","preventDefault","name","price","toFixed","parseFloat","inputs","console","log","showCartItems","map","item","product","image","description","quantity","className","src","alt","class","onClick","checkProductQuantity","showBonusItems","type","onChange","checked","style","display","margin","marginTop","Fragment","asOverlay","onClear","length","color","marginLeft","fontSize","marginRight","size","option","active","element","label","validators","VALIDATOR_REQUIRE","VALIDATOR_MIN","errorText","onInput","disabled","to"],"mappings":"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","file":"static/js/6.4a1928c8.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport \"./Cart.css\"\r\nimport Button from '../FormElements/Button'\r\nimport LoadingSpinner from \"../UIElements/LoadingSpinner\"\r\nimport { useHttpClient } from '../hooks/http-hook';\r\nimport { useDate } from '../hooks/date-hook';\r\nimport ErrorModal from \"../UIElements/ErrorModal\";\r\nimport { CartContext } from '../../context/cart-context';\r\nimport Card from '../UIElements/Card';\r\nimport { Link } from 'react-router-dom';\r\nimport { useForm } from \"../hooks/form-hook\"\r\nimport {\r\n    VALIDATOR_REQUIRE,\r\n    VALIDATOR_MIN\r\n  } from '../util/validators';\r\n  import Input from '../FormElements/Input';\r\n\r\nconst Cart = () => {\r\n\r\n    const [orderValid, setOrderValid] = useState({valid: false, message: ''})\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const [minOrderValue, setMinOrderValue] = useState(false);\r\n    const [deliveryHours, setDeliveryHours] = useState(false);\r\n    const [deliveryPrice, setDeliveryPrice] = useState(false);\r\n    const [minBonusDeliveryPrice, setMinBonusDeliveryPrice] = useState(false);\r\n    const [minBonusItemsPrice, setMinBonusItemsPrice] = useState(false);\r\n    const [bonusItemCheckedId, setBonusItemCheckedId] = useState(false);\r\n    const [tipIsClicked, setTipIsClicked] = useState({\r\n        constant: false,\r\n        own: false\r\n    });\r\n    const [bonusItems, setBonusItems] = useState([]);\r\n    const { cartItems, removeProduct, increase, decrease, total, addBonusItem, bonusItem, addTip, removeTip, tip } = useContext(CartContext);\r\n    const { today, dayId, currentHour, currentMinute } = useDate();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n            const getMinOrderValue = async () => {\r\n                try {\r\n                    const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/value/${process.env.REACT_APP_MIN_VALUE_ID}`\r\n                  );\r\n                \r\n                setMinOrderValue(responseData.value)\r\n                } catch (err) {}\r\n            }\r\n            const getDeliveryHours = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/time/`\r\n                  );\r\n                \r\n                  setDeliveryHours(responseData.time)\r\n                } catch (err) {}\r\n            } \r\n            const getDeliveryPrice = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/delivery/${process.env.REACT_APP_DELIVERY_PRICE_ID}`\r\n                      );\r\n                      setDeliveryPrice(responseData.delivery_price.value);\r\n                } catch (err) {}\r\n            }\r\n            const getBonusItems = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/bonus/`\r\n                      );\r\n                      setBonusItems(responseData.bonusItems);\r\n                } catch (err) {}\r\n            }\r\n            const getBonusItemsPrice = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/bonus-items/${process.env.REACT_APP_BONUS_ITEMS_PRICE_ID}`\r\n                      );\r\n                      setMinBonusItemsPrice(responseData.bonus_items_price.value);\r\n                } catch (err) {}\r\n            }\r\n            const getBonusDeliveryPrice = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/bonus-delivery/${process.env.REACT_APP_BONUS_DELIVERY_PRICE_ID}`\r\n                      );\r\n                      setMinBonusDeliveryPrice(responseData.bonus_delivery_price.value);\r\n                } catch (err) {}\r\n            }\r\n            getMinOrderValue()\r\n            getDeliveryHours()\r\n            getDeliveryPrice()\r\n            getBonusItems()\r\n            getBonusItemsPrice()\r\n            getBonusDeliveryPrice()\r\n    }, [sendRequest])\r\n\r\n    useEffect(() => {\r\n        const orderValidation = {valid: false, message: ''}\r\n        if(cartItems && deliveryHours && today && dayId && currentHour && currentMinute) {\r\n            const currentDay = deliveryHours.find(time => time._id === dayId)\r\n            const endHour = currentDay.time.end.hour\r\n            const endMinute = currentDay.time.end.minute\r\n            \r\n                if (!currentDay.available) {\r\n                    orderValidation.valid = false\r\n                    orderValidation.message = 'W dzisiejszym dniu nie dowozimy'\r\n                } else if (total < minOrderValue.value) {\r\n                    orderValidation.valid = false\r\n                    orderValidation.message = `Minimalna kwota zamówienia to ${minOrderValue.value} zł`\r\n                }\r\n                else if (endHour < currentHour || (endHour === currentHour && endMinute <= currentMinute)) {\r\n                    orderValidation.valid = false\r\n                    orderValidation.message = `W dzisiejszym dniu już nie dowozimy. Zapraszamy ponownie.`\r\n                    }\r\n                else {\r\n                    orderValidation.valid = true\r\n                    orderValidation.message = ''\r\n            }\r\n        }\r\n        return (\r\n            setOrderValid(orderValidation)\r\n            )\r\n    }, [cartItems, deliveryHours, today, dayId, currentHour, currentMinute, total, minOrderValue])\r\n\r\n    useEffect(() => {\r\n        setTipIsClicked({\r\n            constant: false,\r\n            own: false\r\n        })\r\n        removeTip()\r\n    }, [orderValid.valid, total])\r\n\r\n    const [formState, inputHandler] = useForm(\r\n        {\r\n            tip: {\r\n                value: '',\r\n                isValid: false\r\n        }\r\n        },\r\n        false\r\n      );\r\n\r\n    const checkProductQuantity = (quantity, product) => {\r\n        if(quantity <= 0) removeProduct(product)\r\n    }\r\n\r\n    const changeBonusItem = (e) => {\r\n        setBonusItemCheckedId(e.target.id)\r\n    }\r\n\r\n    const tipButtonHandler = (e) => {\r\n        e.preventDefault()\r\n        let newTipIsClicked\r\n        \r\n        // console.log(e.target.name);\r\n        if (e.target.name === \"10%\")\r\n        {\r\n            if (tipIsClicked.constant) {\r\n                removeTip()\r\n                newTipIsClicked = {\r\n                    constant: false,\r\n                    own: false\r\n                }\r\n            } else {\r\n                newTipIsClicked = {\r\n                    constant: true,\r\n                    own: false\r\n                }\r\n                addTip({\r\n                _id: 'tip',\r\n                name: 'napiwek 10%',\r\n                price: (total * 0.1).toFixed(2)\r\n            })\r\n            }\r\n        }\r\n        else if (e.target.name === \"own\")\r\n        {\r\n            if (tipIsClicked.own) {\r\n            removeTip()\r\n            newTipIsClicked = {\r\n                constant: false,\r\n                own: false\r\n            }\r\n        } else {\r\n            newTipIsClicked = {\r\n                constant: false,\r\n                own: true\r\n            }\r\n            addTip({\r\n            _id: 'tip',\r\n            name: 'napiwek',\r\n            price: parseFloat(formState.inputs.tip.value).toFixed(2)\r\n        })\r\n        }\r\n    }\r\n        console.log(newTipIsClicked);\r\n        \r\n        setTipIsClicked(newTipIsClicked)\r\n    }\r\n\r\n    const showCartItems = cartItems.map(item => {\r\n        const product = { id: item.id, name: item.name, price: item.price, image: item.image, description: item.description };\r\n        const price = item.price * item.quantity\r\n        return (\r\n        <li className=\"item-card\" key={item.id}>\r\n            <img src={`${process.env.REACT_APP_AWS_URL}/${item.image}`} alt={item.name}></img>\r\n            <span className=\"item-name\">{item.name}</span>\r\n            <span class=\"fas fa-minus item-quantity__handler\" onClick={() => {\r\n                decrease(product)\r\n                checkProductQuantity(item.quantity, product)\r\n                }}></span>\r\n            <span class=\"item-quantity\">{item.quantity}</span>\r\n            <span class=\"fas fa-plus item-quantity__handler\" onClick={() => {increase(product)}}></span>\r\n            <span class=\"item-price\">{price.toFixed(2)} zł</span>\r\n            <span class=\"fas fa-times item-remove\" onClick={() => {removeProduct(product)}}></span>\r\n        </li>\r\n            )\r\n    })\r\n\r\n    const showBonusItems = bonusItems.map(item => {\r\n        return <li className=\"item-card bonus-item\" key={item._id}>\r\n            <img src={`${process.env.REACT_APP_AWS_URL}/${item.image}`} alt={item.image}></img>\r\n            <div>\r\n                <span>{item.name}</span>\r\n                <input id={item._id} type='checkbox' \r\n                onChange={changeBonusItem}\r\n                onClick={() => addBonusItem(item)}\r\n                checked={item._id === (bonusItemCheckedId || (bonusItem && bonusItem.id))} \r\n                style={{display: 'block', margin: 'auto', marginTop: '0.5em'}} />\r\n            </div>\r\n            \r\n        </li>\r\n    })\r\n\r\n    return (\r\n        <React.Fragment>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <ErrorModal error={error} onClear={clearError} />\r\n        <div className=\"cart\">\r\n                <h1>Twój koszyk</h1>\r\n                {cartItems.length > 0 &&<div className=\"cart-info\">\r\n                    <p>Koszt dowozu: <b>{deliveryPrice && deliveryPrice} zł</b>, w przypadku dowozu poza Lublin koszt obliczany wg odległości.</p>\r\n                    <p>Cena produktów zawiera koszt opakowania jednorazowego</p>\r\n                    {minBonusDeliveryPrice && <p>Zamówienie powyżej {minBonusDeliveryPrice} zł <b style={{color: \"lightgreen\"}}>dostawa gratis!</b></p>}\r\n                    {bonusItems.length > 0 && minBonusItemsPrice && <p >Zamówienie powyżej {minBonusItemsPrice} zł <b style={{color: \"lightgreen\"}}>produkt gratis!</b></p>}\r\n                </div>}\r\n                {cartItems.length > 0 && <Card>\r\n            <div className=\"cart-products\">\r\n            <li className=\"item-card titles\">\r\n                    <span className='item-name'>Produkt</span>\r\n                    <span className='item-quantity-title'>Ilość</span>\r\n                    <span className='item-price-title'>Cena</span>\r\n                    <span className='item-remove-title'></span>\r\n            </li>\r\n                {showCartItems}\r\n            <li className=\"item-card summary \">\r\n                    <span className='item-name'></span>\r\n                    <span className='total'>SUMA:  <b style={{marginLeft: \"5px\", color: \"white\"}}>{total.toFixed(2)} zł</b> \r\n                    {total.toFixed(2) <= minBonusDeliveryPrice ? <b> + ({deliveryPrice} zł dostawa)</b> : <span style={{fontSize: \"0.7em\", color: \"lightgreen\"}}>(powyżej {minBonusDeliveryPrice} zł dostawa gratis)</span>} </span>\r\n            </li>\r\n            <li className=\"item-card__alert\">\r\n                    <span>{!orderValid.valid && minOrderValue && <p style={{marginRight: '1em'}}>{orderValid.message}</p>}</span>\r\n            </li>\r\n            {orderValid.valid && <li className=\"item-card tip\">\r\n                <Button\r\n                size='small'\r\n                option='10%'\r\n                active={tipIsClicked.constant}\r\n                onClick={tipButtonHandler}\r\n                >Zostaw napiwek 10%</Button>\r\n                <span>lub</span>\r\n                <div>\r\n                <Input \r\n                    id=\"tip\"\r\n                    element=\"input\"\r\n                    type=\"number\"\r\n                    label=\"Wprowadź kwotę napiwku:\"\r\n                    validators={[VALIDATOR_REQUIRE(), VALIDATOR_MIN(1)]}\r\n                    errorText=\"Wprowadź poprawną kwotę.\"\r\n                    onInput={inputHandler}\r\n                /> zł\r\n                <Button\r\n                size='small'\r\n                option='own'\r\n                id='own'\r\n                active={tipIsClicked.own}\r\n                onClick={tipButtonHandler}\r\n                disabled={!formState.isValid}\r\n                >Zostaw napiwek</Button>\r\n                </div>\r\n            </li>}\r\n            {total.toFixed(2) > minBonusItemsPrice && orderValid.valid && <div>\r\n                <h3>Wybierz produkt gratis</h3>\r\n                <div className=\"bonus\">\r\n                {showBonusItems}\r\n                </div>\r\n            </div>}\r\n            </div>\r\n            \r\n            </Card>}\r\n            {!cartItems.length > 0 && <h3 style={{color: \"white\"}}>Brak produktów w koszyku</h3>}\r\n            {cartItems.length > 0 && <Link to=\"/zamowienie\"><Button disabled={!orderValid.valid}>Przejdź do zamówienia</Button></Link>}\r\n            {!cartItems.length > 0 && <Link to=\"/\"><Button>Przejdź do sklepu</Button></Link>}\r\n        </div>\r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport default Cart\r\n"],"sourceRoot":""}