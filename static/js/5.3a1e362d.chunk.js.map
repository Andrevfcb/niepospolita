{"version":3,"sources":["Components/Body/Order.js"],"names":["Order","useHttpClient","isLoading","error","sendRequest","clearError","useState","deliveryPrice","setDeliveryPrice","timepickerValue","setTimepickerValue","minTime","setMinTime","maxTime","setMaxTime","isToLateToOrder","setIsToLateToOrder","paymentOffline","setPaymentOffline","minBonusDeliveryPrice","setMinBonusDeliveryPrice","minBonusItemsPrice","setMinBonusItemsPrice","deliveryHours","setDeliveryHours","stripe","useStripe","history","useHistory","useDate","today","dayId","currentHour","currentMinute","useContext","CartContext","cartItems","total","bonusItem","tip","useEffect","window","scrollTo","getDeliveryPrice","a","process","responseData","delivery_price","value","getDeliveryHours","time","getBonusItemsPrice","bonus_items_price","getBonusDeliveryPrice","bonus_delivery_price","minOrderTime","maxOrderTime","currentDay","find","_id","startHour","start","hour","startMinute","minute","endHour","end","endMinute","toString","Date","useForm","street","isValid","local","apartament","zipCode","city","email","phoneNumber","message","formState","inputHandler","formSubmitHandler","event","preventDefault","customer_items","map","i","quantity","name","price","line_items","price_data","currency","unit_amount","product_data","description","push","item","parseFloat","toFixed","address","inputs","target","id","JSON","stringify","customer_email","deliveryHour","phone","productName","option","sessionId","redirectToCheckout","paymentMethod","delivery_info","totalAmount","bonusItemName","tipValue","customer_phoneNumber","customer_address","location","reload","Fragment","asOverlay","onClear","className","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValid","style","position","VALIDATOR_EMAIL","fontWeight","marginBottom","minHeight","placeholder","format","step","min","max","onChange","e","hours","minutes","getHours","getMinutes","disabled","onClick","prevPayment","isClicked","margin","payment","color"],"mappings":"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","file":"static/js/5.3a1e362d.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport \"./Order.css\"\r\nimport Button from '../FormElements/Button'\r\nimport LoadingSpinner from \"../UIElements/LoadingSpinner\"\r\nimport { useHttpClient } from '../hooks/http-hook';\r\nimport ErrorModal from \"../UIElements/ErrorModal\";\r\nimport { CartContext } from '../../context/cart-context';\r\nimport Card from '../UIElements/Card';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useStripe } from '@stripe/react-stripe-js'\r\nimport { TimePickerComponent } from '@syncfusion/ej2-react-calendars'\r\nimport { useDate } from '../hooks/date-hook';\r\n\r\nimport {\r\n    VALIDATOR_REQUIRE,\r\n    VALIDATOR_EMAIL\r\n  } from '../util/validators';\r\n  import Input from '../FormElements/Input';\r\n\r\nimport { useForm } from \"../hooks/form-hook\"\r\n\r\nconst Order = () => {\r\n    \r\n\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    \r\n    const [deliveryPrice, setDeliveryPrice] = useState(false);\r\n    const [timepickerValue, setTimepickerValue] = useState('nie okre≈õlono');\r\n    const [minTime, setMinTime] = useState();\r\n    const [maxTime, setMaxTime] = useState();\r\n    const [isToLateToOrder, setIsToLateToOrder] = useState(false);\r\n    const [paymentOffline, setPaymentOffline] = useState(false);\r\n    const [minBonusDeliveryPrice, setMinBonusDeliveryPrice] = useState(false);\r\n    const [minBonusItemsPrice, setMinBonusItemsPrice] = useState(false);\r\n\r\n    const [deliveryHours, setDeliveryHours] = useState(false);\r\n    const stripe = useStripe();\r\n    let history = useHistory();\r\n    \r\n    const { today, dayId, currentHour, currentMinute } = useDate();\r\n    const { cartItems, total, bonusItem, tip } = useContext(CartContext);\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n            const getDeliveryPrice = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/delivery/${process.env.REACT_APP_DELIVERY_PRICE_ID}`\r\n                      );\r\n                      setDeliveryPrice(responseData.delivery_price.value);\r\n                } catch (err) {}\r\n            }\r\n            const getDeliveryHours = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/time/`\r\n                  );\r\n                \r\n                  setDeliveryHours(responseData.time)\r\n                } catch (err) {}\r\n            } \r\n            const getBonusItemsPrice = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/bonus-items/${process.env.REACT_APP_BONUS_ITEMS_PRICE_ID}`\r\n                      );\r\n                      setMinBonusItemsPrice(responseData.bonus_items_price.value);\r\n                } catch (err) {}\r\n            }\r\n            const getBonusDeliveryPrice = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/bonus-delivery/${process.env.REACT_APP_BONUS_DELIVERY_PRICE_ID}`\r\n                      );\r\n                      setMinBonusDeliveryPrice(responseData.bonus_delivery_price.value);\r\n                } catch (err) {}\r\n            }\r\n            getDeliveryPrice()\r\n            getDeliveryHours()\r\n            getBonusItemsPrice()\r\n            getBonusDeliveryPrice()\r\n    }, [sendRequest])\r\n\r\n    useEffect(() => {\r\n        let minOrderTime\r\n        let maxOrderTime\r\n        if(deliveryHours && today && dayId && currentHour && currentMinute) {\r\n            const currentDay = deliveryHours.find(time => time._id === dayId)\r\n            const startHour = currentDay.time.start.hour\r\n            let startMinute = currentDay.time.start.minute\r\n            const endHour = currentDay.time.end.hour\r\n            let endMinute = currentDay.time.end.minute\r\n\r\n            if (currentDay.time.start.minute < 10) {\r\n                startMinute = currentDay.time.start.minute + '0'\r\n            } else {\r\n                startMinute = currentDay.time.start.minute\r\n            }\r\n\r\n            if (currentDay.time.end.minute < 10) {\r\n                endMinute = currentDay.time.end.minute + '0'\r\n            } else {\r\n                endMinute = currentDay.time.end.minute\r\n            }\r\n            \r\n            maxOrderTime = (endHour + ':' + endMinute).toString()\r\n            \r\n            \r\n            if(currentHour > startHour) {\r\n                if(currentMinute > 45) {\r\n                    minOrderTime = (currentHour + 2 + ':00').toString()\r\n                } else if (currentMinute > 30) {\r\n                    minOrderTime = (currentHour + 1 + ':45').toString()\r\n                } else if (currentMinute > 15) {\r\n                    minOrderTime = (currentHour + 1 + ':30').toString()\r\n                } else {\r\n                    minOrderTime = (currentHour + 1 + ':15').toString()\r\n                }\r\n                \r\n            } else if (currentHour === startHour && currentMinute > startMinute) {\r\n                if(currentMinute > 45) {\r\n                    minOrderTime = (currentHour + 2 + ':00').toString()\r\n                } else if (currentMinute > 30) {\r\n                    minOrderTime = (currentHour + 1 + ':45').toString()\r\n                } else if (currentMinute > 15) {\r\n                    minOrderTime = (currentHour + 1 + ':30').toString()\r\n                } else {\r\n                    minOrderTime = (currentHour + 1 + ':15').toString()\r\n                }\r\n            } else minOrderTime = (startHour + 1 + ':' + startMinute).toString()\r\n\r\n            if(currentHour >= endHour || (currentHour === (endHour - 1) && (currentMinute > endMinute )) ) {\r\n                setIsToLateToOrder(true)\r\n            }\r\n        }\r\n            if(minOrderTime && maxOrderTime) {\r\n                setMinTime(new Date(`8/3/2017 ${minOrderTime}`))\r\n                setMaxTime(new Date(`8/3/2017 ${maxOrderTime}`))\r\n            }\r\n    }, [deliveryHours, today, dayId, currentHour, currentMinute])\r\n\r\n    const [formState, inputHandler] = useForm(\r\n        {\r\n            street: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n            local: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n            apartament: {\r\n                value: null,\r\n                isValid: true\r\n        },\r\n            zipCode: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n            city: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n            email: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n            phoneNumber: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n        message: {\r\n            value: null,\r\n            isValid: true\r\n        },\r\n        },\r\n        false\r\n      );\r\n\r\n    const formSubmitHandler = async event => {\r\n        event.preventDefault();\r\n        \r\n        let customer_items = cartItems.map(i => {\r\n            return {\r\n                quantity: i.quantity,\r\n                name: i.name,\r\n                price: i.price\r\n            }\r\n        })\r\n        let line_items\r\n        if (cartItems && deliveryPrice) {\r\n            line_items = cartItems.map(i => {\r\n                return {\r\n                    quantity: i.quantity,\r\n                    price_data: {\r\n                        currency: \"pln\",\r\n                        unit_amount: i.price * 100,\r\n                        product_data: {\r\n                            name: i.name,\r\n                            description: i.description\r\n                        }\r\n                    }  \r\n                }\r\n            })\r\n    \r\n            const delivery_price = {\r\n                quantity: 1,\r\n                price_data: {\r\n                    currency: \"pln\",\r\n                    unit_amount: deliveryPrice * 100,\r\n                    product_data: {\r\n                        name: 'op≈Çata za dow√≥z'\r\n                    }\r\n                }  \r\n            }\r\n\r\n            if (total <= minBonusDeliveryPrice) {\r\n                line_items.push(delivery_price)\r\n            }\r\n            \r\n            if (total >= minBonusItemsPrice && bonusItem) {\r\n                line_items.push({\r\n                    quantity: 1,\r\n                    price_data: {\r\n                        currency: \"pln\",\r\n                        unit_amount: 0 * 100,\r\n                        product_data: {\r\n                            name: bonusItem.item + \" gratis\"\r\n                        }}})\r\n            }\r\n            if (tip) {\r\n                const price = parseFloat((tip.price * 100).toFixed(2))\r\n                line_items.push({\r\n                    quantity: 1,\r\n                    price_data: {\r\n                        currency: \"pln\",\r\n                        unit_amount: price,\r\n                        product_data: {\r\n                            name: tip.item\r\n                        }}})\r\n            }\r\n        }\r\n        \r\n        let address = {\r\n            street: formState.inputs.street.value,\r\n            local: formState.inputs.local.value,\r\n            zipCode: formState.inputs.zipCode.value,\r\n            city: formState.inputs.city.value\r\n        }\r\n        if (!!formState.inputs.apartament.value) {\r\n            address = {\r\n                ...address,\r\n                apartament: `/ ${formState.inputs.apartament.value}`\r\n            }\r\n        } else {\r\n            address = {\r\n                ...address,\r\n                apartament: false\r\n            }\r\n        }\r\n        let message\r\n        if (!!formState.inputs.message.value) {\r\n            message = formState.inputs.message.value\r\n        } else {\r\n            message = 'brak'\r\n        }\r\n        if (event.target.id === \"payment-online\" && !isToLateToOrder) {\r\n            try {\r\n                const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/checkout/`,\r\n                    'POST',\r\n                    JSON.stringify({\r\n                        line_items,\r\n                        customer_email: formState.inputs.email.value,\r\n                        message,\r\n                        deliveryHour: timepickerValue.toString(),\r\n                        phone: formState.inputs.phoneNumber.value,\r\n                        address,\r\n                        productName: '',\r\n                        option: 'order'\r\n                    }),\r\n                    {\r\n                      'Content-Type': 'application/json'\r\n                    }\r\n                );\r\n                const { sessionId } = responseData\r\n                await stripe.redirectToCheckout({\r\n                    sessionId\r\n                })\r\n            } catch (err) {}\r\n        } else if (event.target.id === \"payment-offline\" && !isToLateToOrder) {\r\n\r\n            let delivery_info\r\n            let totalAmount\r\n            const paymentMethod = event.target.name\r\n            if (total && deliveryPrice && total <= minBonusDeliveryPrice ) {\r\n                delivery_info = deliveryPrice + \"z≈Ç\"\r\n                totalAmount = total + deliveryPrice\r\n            } else {\r\n                delivery_info = \"dostawa gratis\"\r\n                totalAmount = total\r\n            }\r\n            let bonusItemName = 'brak'\r\n            if(bonusItem && total > minBonusItemsPrice ) {\r\n                bonusItemName = bonusItem.item\r\n            }\r\n            let tipValue = 'brak'\r\n            if (tip) {\r\n                tipValue = tip.price.toFixed(2)\r\n                totalAmount = (totalAmount + tip.price).toFixed(2)\r\n            }\r\n            \r\n            try { \r\n                await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/mail/`,\r\n                    'POST',\r\n                    JSON.stringify({\r\n                        customer_email: formState.inputs.email.value,\r\n                        customer_phoneNumber: formState.inputs.phoneNumber.value,\r\n                        customer_address: address,\r\n                        customer_items,\r\n                        message,\r\n                        total: totalAmount,\r\n                        delivery_info,\r\n                        bonusItemName,\r\n                        tip: tipValue,\r\n                        timepickerValue,\r\n                        paymentMethod,\r\n                        option: 'order'\r\n                    }),\r\n                    {\r\n                      'Content-Type': 'application/json'\r\n                    }\r\n                );\r\n                await history.push(\"/success\")\r\n                window.location.reload()\r\n              } catch (err) {}\r\n        } \r\n      };\r\n\r\n    const handleTimeValue = (e) => {\r\n        let hours\r\n        let minutes\r\n        if (e.target.value) {\r\n            hours = e.target.value.getHours()\r\n            minutes = e.target.value.getMinutes()\r\n            if (minutes < 10) {\r\n                minutes = '0' + e.target.value.getMinutes()\r\n            }\r\n            setTimepickerValue(hours + ':' + minutes)\r\n        } else {setTimepickerValue('nie okre≈õlono')}\r\n      }\r\n\r\n    const handleOfflinePayment = (e) => {\r\n        e.preventDefault();\r\n        setPaymentOffline(prevPayment => !prevPayment)\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <ErrorModal error={error} onClear={clearError} />\r\n        <div className=\"order\">\r\n                <h1>Uzupe≈Çnij dane do zam√≥wienia</h1>\r\n                <Card>\r\n                {!isToLateToOrder &&  \r\n                <form\r\n                >\r\n                    <div className=\"address-street\">\r\n                    <Input \r\n                    id=\"street\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Ulica\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Wprowad≈∫ poprawnƒÖ nazwƒô ulicy.\"\r\n                    onInput={inputHandler}\r\n                    />\r\n                    <Input \r\n                    id=\"local\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Nr lokalu\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Podaj poprawny nr lokalu.\"\r\n                    onInput={inputHandler}\r\n                    />\r\n                    <Input \r\n                    id=\"apartament\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Nr mieszkania\"\r\n                    validators={null}\r\n                    initialValid={true}\r\n                    onInput={inputHandler}\r\n                    />\r\n                    </div>\r\n                    <div className=\"address-city\">\r\n                        <div className=\"address-city__zip\" style={{position: 'relative'}}>\r\n                            <div className=\"address-city__zip-input\">\r\n                            <Input \r\n                                id=\"zipCode\"\r\n                                element=\"input\"\r\n                                type=\"text\"\r\n                                label=\"Kod pocztowy\"\r\n                                validators={[VALIDATOR_REQUIRE()]}\r\n                                errorText={\"Podaj poprawny kod pocztowy.\"}\r\n                                onInput={inputHandler}\r\n                            />\r\n                            </div>\r\n                        </div>\r\n                    <div className=\"address-city__city\">\r\n                    <Input \r\n                    id=\"city\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Miasto\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Podaj poprawnƒÖ nazwƒô miasta.\"\r\n                    onInput={inputHandler}\r\n                    />\r\n                    </div>\r\n                    \r\n                    </div>\r\n                    <Input \r\n                    id=\"email\"\r\n                    element=\"input\"\r\n                    type=\"email\"\r\n                    label=\"Email\"\r\n                    validators={[VALIDATOR_REQUIRE(), VALIDATOR_EMAIL]}\r\n                    errorText=\"Podaj poprawny email.\"\r\n                    onInput={inputHandler}\r\n                    />\r\n                    <Input \r\n                    id=\"phoneNumber\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Numer telefonu\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Podaj nr telefonu.\"\r\n                    onInput={inputHandler}\r\n                    />\r\n                    <Input \r\n                    id=\"message\"\r\n                    element=\"textarea\"\r\n                    type=\"text\"\r\n                    label=\"Komentarz do dostawcy\"\r\n                    validators={null}\r\n                    initialValid={true}\r\n                    onInput={inputHandler}\r\n                    />\r\n                    <label style={{fontWeight: 'bold', marginBottom: '0.5rem', minHeight: '28px'}}>Wybierz oczekiwany czas dowozu:</label>\r\n                    <div className='timepicker'>\r\n                    <TimePickerComponent\r\n                    placeholder=\"wybierz godzinƒô\"\r\n                    format=\"HH:mm\"\r\n                    step={15}\r\n                    min={minTime}\r\n                    max={maxTime}\r\n                    onChange={handleTimeValue}\r\n                    ></TimePickerComponent>\r\n                    </div>\r\n                    <div>\r\n                    <Button\r\n                    disabled={!formState.isValid || isToLateToOrder}\r\n                    id=\"payment-offline\"\r\n                    onClick={handleOfflinePayment}\r\n                    isClicked={paymentOffline}\r\n                    >\r\n                    P≈ÅATNO≈öƒÜ PRZY ODBIORZE\r\n                    </Button>\r\n                    <Button\r\n                    disabled={!formState.isValid || isToLateToOrder || paymentOffline}\r\n                    id=\"payment-online\"\r\n                    onClick={formSubmitHandler}\r\n                    >\r\n                    P≈ÅATNO≈öƒÜ ONLINE\r\n                    </Button>\r\n                    </div>\r\n                    {paymentOffline && <div style={{margin: '1em'}}>\r\n                    <Button\r\n                    disabled={!formState.isValid || isToLateToOrder}\r\n                    id=\"payment-offline\"\r\n                    payment=\"karta\"\r\n                    onClick={formSubmitHandler}\r\n                    >\r\n                    P≈ÅATNO≈öƒÜ KARTƒÑ\r\n                    </Button>\r\n                    <Button\r\n                    disabled={!formState.isValid || isToLateToOrder}\r\n                    id=\"payment-offline\"\r\n                    payment=\"got√≥wka\"\r\n                    onClick={formSubmitHandler}\r\n                    >\r\n                    P≈ÅATNO≈öƒÜ GOT√ìWKƒÑ\r\n                    </Button>\r\n                    </div>}\r\n                </form>}\r\n                {isToLateToOrder && <p style={{color: 'red'}}>Dzi≈õ ju≈º nie dowozimy, zapraszamy ponownie.</p>}\r\n                </Card>\r\n        </div>\r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport default Order\r\n"],"sourceRoot":""}