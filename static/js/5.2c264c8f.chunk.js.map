{"version":3,"sources":["Components/Body/Order.js"],"names":["Order","useHttpClient","isLoading","error","sendRequest","clearError","useState","deliveryPrice","setDeliveryPrice","timepickerValue","setTimepickerValue","minTime","setMinTime","maxTime","setMaxTime","isToLateToOrder","setIsToLateToOrder","isToEarlyToOrder","setIsToEarlyToOrder","message","setMessage","paymentOffline","setPaymentOffline","minBonusDeliveryPrice","setMinBonusDeliveryPrice","minBonusItemsPrice","setMinBonusItemsPrice","deliveryTime","setDeliveryTime","deliveryHours","setDeliveryHours","stripe","useStripe","history","useHistory","useDate","today","dayId","currentHour","currentMinute","useContext","CartContext","cartItems","total","bonusItem","tip","useEffect","window","scrollTo","getDeliveryPrice","a","process","responseData","delivery_price","value","getDeliveryHours","time","getBonusItemsPrice","bonus_items_price","getBonusDeliveryPrice","bonus_delivery_price","fetchDeliveryTime","minOrderTime","maxOrderTime","currentDay","find","_id","startHour","start","hour","startMinute","minute","endHour","end","endMinute","toString","newMessage","Date","useForm","street","isValid","local","apartament","zipCode","city","email","phoneNumber","formState","inputHandler","formSubmitHandler","event","preventDefault","customer_items","map","i","quantity","name","price","line_items","price_data","currency","unit_amount","product_data","description","push","item","parseFloat","toFixed","address","inputs","target","id","JSON","stringify","customer_email","deliveryHour","phone","productName","option","sessionId","redirectToCheckout","paymentMethod","delivery_info","totalAmount","bonusItemName","tipValue","customer_phoneNumber","customer_address","location","reload","Fragment","asOverlay","onClear","className","style","color","marginBottom","fontWeight","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValid","position","VALIDATOR_EMAIL","minHeight","placeholder","format","step","min","max","onChange","e","hours","minutes","getHours","getMinutes","disabled","onClick","prevPayment","isClicked","margin","payment"],"mappings":"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","file":"static/js/5.2c264c8f.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport \"./Order.css\"\r\nimport Button from '../FormElements/Button'\r\nimport LoadingSpinner from \"../UIElements/LoadingSpinner\"\r\nimport { useHttpClient } from '../hooks/http-hook';\r\nimport ErrorModal from \"../UIElements/ErrorModal\";\r\nimport { CartContext } from '../../context/cart-context';\r\nimport Card from '../UIElements/Card';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useStripe } from '@stripe/react-stripe-js'\r\nimport { TimePickerComponent } from '@syncfusion/ej2-react-calendars'\r\nimport { useDate } from '../hooks/date-hook';\r\n\r\nimport {\r\n    VALIDATOR_REQUIRE,\r\n    VALIDATOR_EMAIL\r\n  } from '../util/validators';\r\n  import Input from '../FormElements/Input';\r\n\r\nimport { useForm } from \"../hooks/form-hook\"\r\n\r\nconst Order = () => {\r\n    \r\n\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    \r\n    const [deliveryPrice, setDeliveryPrice] = useState(false);\r\n    const [timepickerValue, setTimepickerValue] = useState('nie określono');\r\n    const [minTime, setMinTime] = useState();\r\n    const [maxTime, setMaxTime] = useState();\r\n    const [isToLateToOrder, setIsToLateToOrder] = useState(false);\r\n    const [isToEarlyToOrder, setIsToEarlyToOrder] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [paymentOffline, setPaymentOffline] = useState(false);\r\n    const [minBonusDeliveryPrice, setMinBonusDeliveryPrice] = useState(false);\r\n    const [minBonusItemsPrice, setMinBonusItemsPrice] = useState(false);\r\n    const [deliveryTime, setDeliveryTime] = useState(false);\r\n\r\n    const [deliveryHours, setDeliveryHours] = useState(false);\r\n    const stripe = useStripe();\r\n    let history = useHistory();\r\n    \r\n    const { today, dayId, currentHour, currentMinute } = useDate();\r\n    const { cartItems, total, bonusItem, tip } = useContext(CartContext);\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n            const getDeliveryPrice = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/delivery/${process.env.REACT_APP_DELIVERY_PRICE_ID}`\r\n                      );\r\n                      setDeliveryPrice(responseData.delivery_price.value);\r\n                } catch (err) {}\r\n            }\r\n            const getDeliveryHours = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/time/`\r\n                  );\r\n                \r\n                  setDeliveryHours(responseData.time)\r\n                } catch (err) {}\r\n            } \r\n            const getBonusItemsPrice = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/bonus-items/${process.env.REACT_APP_BONUS_ITEMS_PRICE_ID}`\r\n                      );\r\n                      setMinBonusItemsPrice(responseData.bonus_items_price.value);\r\n                } catch (err) {}\r\n            }\r\n            const getBonusDeliveryPrice = async () => {\r\n                \r\n                try {\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/bonus-delivery/${process.env.REACT_APP_BONUS_DELIVERY_PRICE_ID}`\r\n                      );\r\n                      setMinBonusDeliveryPrice(responseData.bonus_delivery_price.value);\r\n                } catch (err) {}\r\n            }\r\n            const fetchDeliveryTime = async () => {\r\n                try {\r\n                  const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/deliverytime/${process.env.REACT_APP_DELIVERY_TIME_ID}`\r\n                  );\r\n                  setDeliveryTime(responseData.deliveryTime.time);\r\n            } catch (err) {} \r\n            };\r\n            fetchDeliveryTime();\r\n            getDeliveryPrice()\r\n            getDeliveryHours()\r\n            getBonusItemsPrice()\r\n            getBonusDeliveryPrice()\r\n    }, [sendRequest])\r\n\r\n    useEffect(() => {\r\n        let minOrderTime\r\n        let maxOrderTime\r\n        if(deliveryHours && today && dayId && currentHour && currentMinute) {\r\n            const currentDay = deliveryHours.find(time => time._id === dayId)\r\n            const startHour = currentDay.time.start.hour\r\n            let startMinute = currentDay.time.start.minute\r\n            const endHour = currentDay.time.end.hour\r\n            let endMinute = currentDay.time.end.minute\r\n\r\n            if (currentDay.time.start.minute < 10) {\r\n                startMinute = currentDay.time.start.minute + '0'\r\n            } else {\r\n                startMinute = currentDay.time.start.minute\r\n            }\r\n\r\n            if (currentDay.time.end.minute < 10) {\r\n                endMinute = currentDay.time.end.minute + '0'\r\n            } else {\r\n                endMinute = currentDay.time.end.minute\r\n            }\r\n            \r\n            maxOrderTime = (endHour + ':' + endMinute).toString()\r\n            \r\n            \r\n            if(currentHour > startHour) {\r\n                if(currentMinute > 45) {\r\n                    minOrderTime = (currentHour + 2 + ':00').toString()\r\n                } else if (currentMinute > 30) {\r\n                    minOrderTime = (currentHour + 1 + ':45').toString()\r\n                } else if (currentMinute > 15) {\r\n                    minOrderTime = (currentHour + 1 + ':30').toString()\r\n                } else {\r\n                    minOrderTime = (currentHour + 1 + ':15').toString()\r\n                }\r\n                \r\n            } else if (currentHour === startHour && currentMinute > startMinute) {\r\n                if(currentMinute > 45) {\r\n                    minOrderTime = (currentHour + 2 + ':00').toString()\r\n                } else if (currentMinute > 30) {\r\n                    minOrderTime = (currentHour + 1 + ':45').toString()\r\n                } else if (currentMinute > 15) {\r\n                    minOrderTime = (currentHour + 1 + ':30').toString()\r\n                } else {\r\n                    minOrderTime = (currentHour + 1 + ':15').toString()\r\n                }\r\n            } else minOrderTime = (startHour + 1 + ':' + startMinute).toString()\r\n\r\n            if(currentHour >= endHour || (currentHour === (endHour - 1) && (currentMinute > endMinute )) ) {\r\n                setIsToLateToOrder(true)\r\n            }\r\n\r\n            if (currentHour < startHour || (currentHour === startHour && currentMinute < startMinute)) {\r\n                setIsToEarlyToOrder(true)\r\n            }\r\n        \r\n            if (deliveryHours && today && dayId) {\r\n            const newMessage = `${startHour < 10 ? '0' + startHour : startHour}:${startMinute}`\r\n            setMessage(newMessage)\r\n            }\r\n        }\r\n            if(minOrderTime && maxOrderTime) {\r\n                setMinTime(new Date(`8/3/2017 ${minOrderTime}`))\r\n                setMaxTime(new Date(`8/3/2017 ${maxOrderTime}`))\r\n            }\r\n    }, [deliveryHours, today, dayId, currentHour, currentMinute])\r\n\r\n    const [formState, inputHandler] = useForm(\r\n        {\r\n            street: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n            local: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n            apartament: {\r\n                value: null,\r\n                isValid: true\r\n        },\r\n            zipCode: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n            city: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n            email: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n            phoneNumber: {\r\n                value: '',\r\n                isValid: false\r\n        },\r\n        message: {\r\n            value: null,\r\n            isValid: true\r\n        },\r\n        },\r\n        false\r\n      );\r\n\r\n    const formSubmitHandler = async event => {\r\n        event.preventDefault();\r\n        \r\n        let customer_items = cartItems.map(i => {\r\n            return {\r\n                quantity: i.quantity,\r\n                name: i.name,\r\n                price: i.price\r\n            }\r\n        })\r\n        let line_items\r\n        if (cartItems && deliveryPrice) {\r\n            line_items = cartItems.map(i => {\r\n                return {\r\n                    quantity: i.quantity,\r\n                    price_data: {\r\n                        currency: \"pln\",\r\n                        unit_amount: i.price * 100,\r\n                        product_data: {\r\n                            name: i.name,\r\n                            description: i.description\r\n                        }\r\n                    }  \r\n                }\r\n            })\r\n    \r\n            const delivery_price = {\r\n                quantity: 1,\r\n                price_data: {\r\n                    currency: \"pln\",\r\n                    unit_amount: deliveryPrice * 100,\r\n                    product_data: {\r\n                        name: 'opłata za dowóz'\r\n                    }\r\n                }  \r\n            }\r\n\r\n            if (total <= minBonusDeliveryPrice) {\r\n                line_items.push(delivery_price)\r\n            }\r\n            \r\n            if (total >= minBonusItemsPrice && bonusItem) {\r\n                line_items.push({\r\n                    quantity: 1,\r\n                    price_data: {\r\n                        currency: \"pln\",\r\n                        unit_amount: 0 * 100,\r\n                        product_data: {\r\n                            name: bonusItem.item + \" gratis\"\r\n                        }}})\r\n            }\r\n            if (tip) {\r\n                const price = parseFloat((tip.price * 100).toFixed(2))\r\n                line_items.push({\r\n                    quantity: 1,\r\n                    price_data: {\r\n                        currency: \"pln\",\r\n                        unit_amount: price,\r\n                        product_data: {\r\n                            name: tip.item\r\n                        }}})\r\n            }\r\n        }\r\n        \r\n        let address = {\r\n            street: formState.inputs.street.value,\r\n            local: formState.inputs.local.value,\r\n            zipCode: formState.inputs.zipCode.value,\r\n            city: formState.inputs.city.value\r\n        }\r\n        if (!!formState.inputs.apartament.value) {\r\n            address = {\r\n                ...address,\r\n                apartament: `/ ${formState.inputs.apartament.value}`\r\n            }\r\n        } else {\r\n            address = {\r\n                ...address,\r\n                apartament: false\r\n            }\r\n        }\r\n        let message\r\n        if (!!formState.inputs.message.value) {\r\n            message = formState.inputs.message.value\r\n        } else {\r\n            message = 'brak'\r\n        }\r\n        if (event.target.id === \"payment-online\" && !isToLateToOrder) {\r\n            try {\r\n                const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/checkout/`,\r\n                    'POST',\r\n                    JSON.stringify({\r\n                        line_items,\r\n                        customer_email: formState.inputs.email.value,\r\n                        message,\r\n                        deliveryHour: timepickerValue.toString(),\r\n                        phone: formState.inputs.phoneNumber.value,\r\n                        address,\r\n                        productName: '',\r\n                        option: 'order'\r\n                    }),\r\n                    {\r\n                      'Content-Type': 'application/json'\r\n                    }\r\n                );\r\n                const { sessionId } = responseData\r\n                await stripe.redirectToCheckout({\r\n                    sessionId\r\n                })\r\n            } catch (err) {}\r\n        } else if (event.target.id === \"payment-offline\" && !isToLateToOrder) {\r\n\r\n            let delivery_info\r\n            let totalAmount\r\n            const paymentMethod = event.target.name\r\n            if (total && deliveryPrice && total <= minBonusDeliveryPrice ) {\r\n                delivery_info = deliveryPrice + \"zł\"\r\n                totalAmount = total + deliveryPrice\r\n            } else {\r\n                delivery_info = \"dostawa gratis\"\r\n                totalAmount = total\r\n            }\r\n            let bonusItemName = 'brak'\r\n            if(bonusItem && total > minBonusItemsPrice ) {\r\n                bonusItemName = bonusItem.item\r\n            }\r\n            let tipValue = 'brak'\r\n            if (tip) {\r\n                tipValue = tip.price.toFixed(2)\r\n                totalAmount = (totalAmount + tip.price).toFixed(2)\r\n            }\r\n            \r\n            try { \r\n                await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/mail/`,\r\n                    'POST',\r\n                    JSON.stringify({\r\n                        customer_email: formState.inputs.email.value,\r\n                        customer_phoneNumber: formState.inputs.phoneNumber.value,\r\n                        customer_address: address,\r\n                        customer_items,\r\n                        message,\r\n                        total: totalAmount,\r\n                        delivery_info,\r\n                        bonusItemName,\r\n                        tip: tipValue,\r\n                        timepickerValue,\r\n                        paymentMethod,\r\n                        option: 'order'\r\n                    }),\r\n                    {\r\n                      'Content-Type': 'application/json'\r\n                    }\r\n                );\r\n                await history.push(\"/success\")\r\n                window.location.reload()\r\n              } catch (err) {}\r\n        } \r\n      };\r\n\r\n    const handleTimeValue = (e) => {\r\n        let hours\r\n        let minutes\r\n        if (e.target.value) {\r\n            hours = e.target.value.getHours()\r\n            minutes = e.target.value.getMinutes()\r\n            if (minutes < 10) {\r\n                minutes = '0' + e.target.value.getMinutes()\r\n            }\r\n            setTimepickerValue(hours + ':' + minutes)\r\n        } else {setTimepickerValue('nie określono')}\r\n      }\r\n\r\n    const handleOfflinePayment = (e) => {\r\n        e.preventDefault();\r\n        setPaymentOffline(prevPayment => !prevPayment)\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <ErrorModal error={error} onClear={clearError} />\r\n        <div className=\"order\">\r\n                <h1>Uzupełnij dane do zamówienia</h1>\r\n                {isToEarlyToOrder && <div>\r\n                    <p style={{color: 'red', marginBottom: '1em', fontWeight: 'bold'}}>* Zamówienia zostaną zrealizowane od godziny {message}</p>\r\n                    <p style={{color: 'red', marginBottom: '1em', fontWeight: 'bold'}}>* Czas dowozu {deliveryTime} min.</p>\r\n                </div>}\r\n                <Card>\r\n                {!isToLateToOrder &&  \r\n                <form\r\n                >\r\n                    <div className=\"address-street\">\r\n                    <Input \r\n                    id=\"street\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Ulica\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Wprowadź poprawną nazwę ulicy.\"\r\n                    onInput={inputHandler}\r\n                    />\r\n                    <Input \r\n                    id=\"local\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Nr lokalu\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Podaj poprawny nr lokalu.\"\r\n                    onInput={inputHandler}\r\n                    />\r\n                    <Input \r\n                    id=\"apartament\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Nr mieszkania\"\r\n                    validators={null}\r\n                    initialValid={true}\r\n                    onInput={inputHandler}\r\n                    />\r\n                    </div>\r\n                    <div className=\"address-city\">\r\n                        <div className=\"address-city__zip\" style={{position: 'relative'}}>\r\n                            <div className=\"address-city__zip-input\">\r\n                            <Input \r\n                                id=\"zipCode\"\r\n                                element=\"input\"\r\n                                type=\"text\"\r\n                                label=\"Kod pocztowy\"\r\n                                validators={[VALIDATOR_REQUIRE()]}\r\n                                errorText={\"Podaj poprawny kod pocztowy.\"}\r\n                                onInput={inputHandler}\r\n                            />\r\n                            </div>\r\n                        </div>\r\n                    <div className=\"address-city__city\">\r\n                    <Input \r\n                    id=\"city\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Miasto\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Podaj poprawną nazwę miasta.\"\r\n                    onInput={inputHandler}\r\n                    />\r\n                    </div>\r\n                    \r\n                    </div>\r\n                    <Input \r\n                    id=\"email\"\r\n                    element=\"input\"\r\n                    type=\"email\"\r\n                    label=\"Email\"\r\n                    validators={[VALIDATOR_REQUIRE(), VALIDATOR_EMAIL]}\r\n                    errorText=\"Podaj poprawny email.\"\r\n                    onInput={inputHandler}\r\n                    />\r\n                    <Input \r\n                    id=\"phoneNumber\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Numer telefonu\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Podaj nr telefonu.\"\r\n                    onInput={inputHandler}\r\n                    />\r\n                    <Input \r\n                    id=\"message\"\r\n                    element=\"textarea\"\r\n                    type=\"text\"\r\n                    label=\"Komentarz do dostawcy\"\r\n                    validators={null}\r\n                    initialValid={true}\r\n                    onInput={inputHandler}\r\n                    />\r\n                    <label style={{fontWeight: 'bold', marginBottom: '0.5rem', minHeight: '28px'}}>Wybierz oczekiwany czas dowozu:</label>\r\n                    <div className='timepicker'>\r\n                    <TimePickerComponent\r\n                    placeholder=\"wybierz godzinę\"\r\n                    format=\"HH:mm\"\r\n                    step={15}\r\n                    min={minTime}\r\n                    max={maxTime}\r\n                    onChange={handleTimeValue}\r\n                    ></TimePickerComponent>\r\n                    </div>\r\n                    <div>\r\n                    <Button\r\n                    disabled={!formState.isValid || isToLateToOrder}\r\n                    id=\"payment-offline\"\r\n                    onClick={handleOfflinePayment}\r\n                    isClicked={paymentOffline}\r\n                    >\r\n                    PŁATNOŚĆ PRZY ODBIORZE\r\n                    </Button>\r\n                    <Button\r\n                    disabled={!formState.isValid || isToLateToOrder || paymentOffline}\r\n                    id=\"payment-online\"\r\n                    onClick={formSubmitHandler}\r\n                    >\r\n                    PŁATNOŚĆ ONLINE\r\n                    </Button>\r\n                    </div>\r\n                    {paymentOffline && <div style={{margin: '1em'}}>\r\n                    <Button\r\n                    disabled={!formState.isValid || isToLateToOrder}\r\n                    id=\"payment-offline\"\r\n                    payment=\"karta\"\r\n                    onClick={formSubmitHandler}\r\n                    >\r\n                    PŁATNOŚĆ KARTĄ\r\n                    </Button>\r\n                    <Button\r\n                    disabled={!formState.isValid || isToLateToOrder}\r\n                    id=\"payment-offline\"\r\n                    payment=\"gotówka\"\r\n                    onClick={formSubmitHandler}\r\n                    >\r\n                    PŁATNOŚĆ GOTÓWKĄ\r\n                    </Button>\r\n                    </div>}\r\n                </form>}\r\n                {isToLateToOrder && <p style={{color: 'red'}}>Dziś już nie dowozimy, zapraszamy ponownie.</p>}\r\n                </Card>\r\n        </div>\r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport default Order\r\n"],"sourceRoot":""}