{"version":3,"sources":["Components/Body/SpecialProductCard.js","Components/Body/SpecialReservation.js"],"names":["SpecialProductCard","id","name","price","image","description","quantity","changeClickedProductId","quantityChange","useState","menuQuantity","setMenuQuantity","menuQuantityChange","e","console","log","target","className","includes","prevQuantity","Fragment","src","process","alt","style","fontWeight","marginLeft","color","class","onClick","Button","SpecialReservation","availableHours","reservation","setReservation","available","setAvailable","message","setMessage","Date","getFullYear","getMonth","getDate","startDate","setStartDate","maxGuests","setMaxGuests","specialItem","setSpecialItem","items","setItems","menus","setMenus","useHttpClient","isLoading","error","sendRequest","clearError","stripe","useStripe","history","useHistory","useForm","hour","value","isValid","guests","email","phone","formState","inputHandler","useEffect","day","fetchItems","a","responseData","filteredItems","filter","item","special","length","newMenus","map","i","newMenu","_id","chosen","push","getDay","fetchSpecialReservation","reservations","days","inputs","availableGuests","find","h","parseInt","preventDefault","prevItem","background","innerHTML","formSubmitHandler","event","total","line_items","newItem","price_data","currency","unit_amount","product_data","month","year","address","street","local","zipCode","city","productName","newAvailable","chosenHour","newHours","JSON","stringify","customer_email","deliveryHour","option","sessionId","redirectToCheckout","customer_phoneNumber","customer_address","customer_items","delivery_info","bonusItemName","timepickerValue","paymentMethod","window","location","reload","itemList","setHourOptions","chosenMenus","menu","ErrorModal","onClear","LoadingSpinner","asOverlay","margin","fontSize","marginBottom","marginTop","minHeight","display","selected","onChange","date","dateFormat","minDate","maxDate","Input","element","label","validators","VALIDATOR_REQUIRE","errorText","onInput","options","type","VALIDATOR_MIN","VALIDATOR_MAX","disabled"],"mappings":"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","file":"static/js/7.a2861b9f.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport Button from '../FormElements/Button';\r\n\r\n\r\nconst SpecialProductCard = ({ id, name, price, image, description, quantity, changeClickedProductId, quantityChange }) => {\r\n\r\n    const [menuQuantity, setMenuQuantity] = useState(quantity)\r\n\r\n    const menuQuantityChange = (e) => {\r\n        console.log(e.target.className.includes('fa-minus'));\r\n        \r\n        if (e.target.className.includes('fa-minus')) {\r\n            if(menuQuantity > 1) {\r\n                setMenuQuantity(prevQuantity => prevQuantity - 1)\r\n            } else {\r\n                setMenuQuantity(1)\r\n            }\r\n        } else {\r\n            if(menuQuantity < 9) {\r\n                setMenuQuantity(prevQuantity => prevQuantity + 1)\r\n            } else {setMenuQuantity(9)}\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div\r\n            className=\"item-card\"\r\n            >\r\n                <div className=\"item-card__image\">\r\n                <img src={`${process.env.REACT_APP_AWS_URL}/${image}`} alt={name}></img>\r\n                </div>\r\n                <div className=\"item-card__info\">\r\n                <p className=\" name price\">\r\n                    <span style={{fontWeight: \"bold\"}}>{name}</span>\r\n                    <span style={{fontWeight: \"bold\", marginLeft: \"0.7em\"}}>{price} zł</span>\r\n                </p>\r\n                <p className=\"description\">\r\n                    {description}\r\n                </p>\r\n                <div>\r\n                    {/* Wybierz liczbę: <input \r\n                    type='number' \r\n                    id={id} \r\n                    onChange={quantityChange}\r\n                    min={1}\r\n                    value={quantity}\r\n                    /> */}\r\n                    <span style={{color: 'white'}}>Liczba:</span> \r\n                    <span \r\n                    class=\"fas fa-minus item-quantity__handler\"\r\n                    id={id} \r\n                    onClick={(e) => {\r\n                        menuQuantityChange(e)\r\n                        quantityChange(e)\r\n                        }}></span>\r\n                    <span style={{color: 'white'}}>{menuQuantity}</span>\r\n                    <span\r\n                    class=\"fas fa-plus item-quantity__handler\"\r\n                    id={id}\r\n                    onClick={(e) => {\r\n                        menuQuantityChange(e)\r\n                        quantityChange(e)\r\n                        }}></span>\r\n                <Button \r\n                id={id}\r\n                onClick={changeClickedProductId}\r\n                >WYBIERZ</Button>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default SpecialProductCard\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport \"./SpecialReservation.css\"\r\nimport { useHttpClient } from '../hooks/http-hook';\r\nimport SpecialProductCard from './SpecialProductCard';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { useStripe } from '@stripe/react-stripe-js'\r\nimport Input from '../FormElements/Input';\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MIN, VALIDATOR_MAX } from '../util/validators';\r\nimport { useForm } from '../hooks/form-hook';\r\nimport Button from '../FormElements/Button';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport LoadingSpinner from \"../UIElements/LoadingSpinner\"\r\nimport ErrorModal from \"../UIElements/ErrorModal\"\r\n\r\nconst SpecialReservation = () => {\r\n\r\n    const [reservation, setReservation] = useState({availableHours: []});\r\n    const [available, setAvailable] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [startDate, setStartDate] = useState(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 1));\r\n    const [maxGuests, setMaxGuests] = useState(0)\r\n    const [specialItem, setSpecialItem] = useState([]);\r\n    const [items, setItems] = useState([]);\r\n    const [menus, setMenus] = useState([]);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const stripe = useStripe();\r\n\r\n    let history = useHistory();\r\n\r\n    const [formState, inputHandler] = useForm(\r\n        {\r\n            hour: {\r\n              value: '',\r\n              isValid: false\r\n          },\r\n          guests: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n          email: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        phone: {\r\n            value: '',\r\n            isValid: false\r\n        }\r\n        },\r\n        false\r\n    );\r\n\r\n    useEffect(() => {\r\n        const fetchItems = async () => {\r\n                try {\r\n                    const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/items/`\r\n                  );\r\n                \r\n                const filteredItems = responseData.items.filter(item => item.special === true)\r\n                setItems(filteredItems)\r\n                \r\n                if (menus.length < 1) {\r\n                    let newMenus = []\r\n                    filteredItems.map(i => {\r\n                        const newMenu = {\r\n                            id: i._id,\r\n                            name: i.name,\r\n                            quantity: 1,\r\n                            price: i.price,\r\n                            chosen: false,\r\n                            description: i.description\r\n                        }\r\n                        return newMenus.push(newMenu)\r\n                    }\r\n                    )\r\n                    setMenus(newMenus)\r\n                }\r\n                } catch (err) {}\r\n            }\r\n            let day\r\n            if (startDate) {\r\n                day = startDate.getDay() - 1\r\n                if (day < 0 ) {\r\n                    day = 6\r\n                }\r\n            }\r\n            const fetchSpecialReservation = async () => {\r\n                try {\r\n                  const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/reservation`\r\n                  );\r\n                  setAvailable(responseData.reservations[0].days[day].available.value)\r\n                  setMessage(responseData.reservations[0].days[day].available.message)\r\n                  setReservation(responseData.reservations[0].days[day]);\r\n                  if (formState.inputs.hour.isValid) {\r\n                    const availableGuests = responseData.reservations[0].days[day].availableHours.find(h => h.hour === parseInt(formState.inputs.hour.value))\r\n                    setMaxGuests(availableGuests.guests)\r\n                  }\r\n            } catch (err) {}     \r\n        };\r\n        fetchSpecialReservation();\r\n        fetchItems()\r\n        }, [sendRequest, startDate, formState.inputs.hour.isValid, formState.inputs.hour.value] )\r\n\r\n    const changeClickedProductId = (e) => {\r\n            e.preventDefault();\r\n            \r\n            const value = e.target.value\r\n            if (specialItem.includes(value)) {\r\n                setSpecialItem(prevItem => prevItem.filter(i => !(value === i)))\r\n                e.target.style.background = '#b39809'\r\n                e.target.innerHTML = 'WYBIERZ'\r\n                menus[value].chosen = false\r\n            } else {\r\n                setSpecialItem(prevItem => [...prevItem, value])\r\n                e.target.style.background = '#726006'\r\n                e.target.innerHTML = 'WYBRANO'\r\n                menus[value].chosen = true;\r\n        }\r\n        }\r\n\r\n    const quantityChange = (e) => {\r\n        e.preventDefault();\r\n        const newMenus = [...menus]\r\n        if (e.target.className.includes('fa-minus')) {\r\n            if (newMenus[e.target.id].quantity > 1) {\r\n                newMenus[e.target.id].quantity--\r\n            } else newMenus[e.target.id].quantity = 1;\r\n        } else {\r\n            if (newMenus[e.target.id].quantity < 9) {\r\n                newMenus[e.target.id].quantity++\r\n            } else newMenus[e.target.id].quantity = 9;\r\n            \r\n        }\r\n        setMenus(newMenus)\r\n    }\r\n\r\n    const formSubmitHandler = async event => {\r\n        event.preventDefault();\r\n        let total = 0\r\n        let line_items = []\r\n        if (items && menus) {\r\n            menus.map(item => {\r\n                if (item.chosen && event.target.id === 'payment-online') {\r\n                    const newItem = {\r\n                        quantity: item.quantity,\r\n                        price_data: {\r\n                            currency: \"pln\",\r\n                            unit_amount: item.price * 100,\r\n                            product_data: {\r\n                                name: item.name,\r\n                                description: item.description\r\n                        }  \r\n                    }\r\n                    }\r\n                    return line_items.push(newItem)\r\n                } else if (item.chosen && event.target.id === 'payment-offline') {\r\n                    const newItem = {\r\n                        quantity: item.quantity,\r\n                        name: item.name,\r\n                        price: item.price\r\n                    }\r\n                    \r\n                    total = total + (item.price * item.quantity)\r\n                    return line_items.push(newItem)\r\n                }\r\n            })     \r\n        }\r\n        const day = startDate.getDate()\r\n        const month = startDate.getMonth() + 1\r\n        const year = startDate.getFullYear()\r\n        const message = `Data: ${day}/${month}/${year} - Godzina: ${formState.inputs.hour.value}:00 - liczba osób: ${formState.inputs.guests.value}`\r\n        let address = {\r\n            street: '',\r\n            local: '',\r\n            zipCode: '',\r\n            city: '',\r\n            message\r\n        }\r\n        const productName = ''\r\n        const newAvailable = {\r\n            value: true,\r\n            message\r\n          }\r\n          \r\n          const chosenHour = reservation.availableHours.find(hour => hour.hour === parseInt(formState.inputs.hour.value))\r\n          chosenHour.guests = chosenHour.guests - parseInt(formState.inputs.guests.value)\r\n          let newHours = [\r\n              ...reservation.availableHours\r\n          ]\r\n          try {\r\n            await sendRequest(\r\n              `${process.env.REACT_APP_BACKEND_URL}/api/reservation/${reservation._id}`,\r\n              'PATCH',\r\n              JSON.stringify({\r\n                available: newAvailable,\r\n                availableHours: newHours\r\n              }),\r\n              {\r\n                'Content-Type': 'application/json'\r\n              }\r\n            );\r\n          } catch (err) {}\r\n            if (event.target.id === 'payment-online') {\r\n                try {\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/checkout/`,\r\n                        'POST',\r\n                        JSON.stringify({\r\n                            line_items,\r\n                            customer_email: formState.inputs.email.value,\r\n                            message,\r\n                            deliveryHour: '',\r\n                            phone: formState.inputs.phone.value,\r\n                            address,\r\n                            productName,\r\n                            option: 'reservation'\r\n                        }),\r\n                        {\r\n                          'Content-Type': 'application/json'\r\n                        }\r\n                    );\r\n                    const { sessionId } = responseData\r\n                    await stripe.redirectToCheckout({\r\n                        sessionId\r\n                    })\r\n                } catch (err) {}\r\n              } else if (event.target.id === 'payment-offline') {\r\n                try { \r\n                    await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/api/mail/`,\r\n                        'POST',\r\n                        JSON.stringify({\r\n                            customer_email: formState.inputs.email.value,\r\n                            customer_phoneNumber: formState.inputs.phone.value,\r\n                            customer_address: address,\r\n                            customer_items: line_items,\r\n                            total,\r\n                            delivery_info: '',\r\n                            bonusItemName: '',\r\n                            timepickerValue: '',\r\n                            paymentMethod: '',\r\n                            message,\r\n                            option: 'reservation'\r\n                        }),\r\n                        {\r\n                          'Content-Type': 'application/json'\r\n                        }\r\n                    );\r\n                    await history.push(\"/success\")\r\n                    window.location.reload()\r\n                  } catch (err) {}\r\n              }\r\n      };\r\n        const itemList = items.map((i, id) => {\r\n            let quantity\r\n            if (menus.length > 0) {\r\n                quantity = menus[id].quantity\r\n            }\r\n            return (<SpecialProductCard key={id} id={id} name={i.name} price={i.price} description={i.description} image={i.image} changeClickedProductId={changeClickedProductId} quantityChange={quantityChange} quantity={quantity ? quantity : 1}\r\n                />)\r\n            })\r\n   \r\n        const filteredHours = reservation.availableHours.filter(i => !(i.guests === 0))\r\n        const setHourOptions = filteredHours.map(i => <option value={i.hour}>{i.hour}:00</option>)\r\n        const chosenMenus = menus.map(menu => {\r\n            if (menu.chosen) return (<p style={{color: 'white'}}>\r\n                {menu.name} - Ilość: {menu.quantity} - Cena: {menu.price * menu.quantity} zł\r\n            </p>)\r\n        })\r\n\r\n    return (\r\n        <div className=\"special\">\r\n        <ErrorModal error={error} onClear={clearError} />\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        {available && <div>\r\n        {items.length > 0 && \r\n            <div className=\"special-items\">\r\n            <h1>Wybierz menu i zarezerwuj stolik</h1>\r\n            {itemList}\r\n            </div>\r\n            }\r\n            {specialItem.length > 0 && <form\r\n            className=\"special-reservation\">\r\n                <h2 style={{margin: '0'}}\r\n                >Uzupełnij dane:</h2>\r\n                <p style={{fontWeight: 'bold', fontSize: '1.2em'}}>Wybrano:</p>\r\n                {menus && chosenMenus}\r\n            <label style={{\r\n                fontWeight: 'bold', \r\n                marginBottom: '0.5em', \r\n                marginTop: '2em', \r\n                minHeight: '28px',\r\n                display: 'block'\r\n                }}>Wybierz datę:</label>\r\n            <DatePicker \r\n            id=\"date\"\r\n            selected={startDate} \r\n            onChange={(date) => {\r\n                setStartDate(date)\r\n                formState.inputs.hour.value = ''\r\n                formState.inputs.hour.isValid = false\r\n                formState.inputs.guests.value = ''\r\n                formState.inputs.guests.isValid = false\r\n                setMaxGuests(0)\r\n            }}\r\n            dateFormat='dd/MM/yyyy' \r\n            minDate={new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 1)}\r\n            maxDate={new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 10)}\r\n            />\r\n            <Input \r\n                id=\"hour\"\r\n                element=\"select\"\r\n                name=\"select\"\r\n                label=\"Wybierz godzinę:\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Proszę wybrać godzinę.\"\r\n                onInput={inputHandler}\r\n                options={setHourOptions}\r\n            />\r\n            <Input \r\n                id=\"guests\"\r\n                element=\"input\"\r\n                type=\"number\"\r\n                label={`Wybierz liczbę osób: \r\n                ${maxGuests > 0 && formState.inputs.hour.isValid ? `(na godzinę ${formState.inputs.hour.value}:00 maksymalna liczba osób - ${maxGuests})`: ''}`}\r\n                validators={[VALIDATOR_MIN(0), VALIDATOR_MAX(maxGuests)]}\r\n                errorText={`Nieprawidłowa liczba osób`}\r\n                onInput={inputHandler}\r\n                options={setHourOptions}\r\n            />\r\n            <Input \r\n                id=\"email\"\r\n                element=\"input\"\r\n                type=\"email\"\r\n                label=\"Podaj email:\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Nieprawidłowy email.\"\r\n                onInput={inputHandler}\r\n            />\r\n            <Input \r\n                id=\"phone\"\r\n                element=\"input\"\r\n                type=\"text\"\r\n                label=\"Podaj nr telefonu:\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Nieprawidłowy nr telefonu.\"\r\n                onInput={inputHandler}\r\n            />\r\n            <Button\r\n                id=\"payment-offline\"\r\n                onClick={formSubmitHandler}\r\n                disabled={startDate && (!formState.isValid || !formState.inputs.hour.isValid || !formState.inputs.guests.isValid || formState.inputs.guests.value === '0' || specialItem.length <= 0)}\r\n            >\r\n                Zapłać na miejscu\r\n                </Button>\r\n            <Button\r\n                id=\"payment-online\"\r\n                onClick={formSubmitHandler}\r\n                disabled={startDate && (!formState.isValid || !formState.inputs.hour.isValid || !formState.inputs.guests.isValid || formState.inputs.guests.value === '0' || specialItem.length <= 0)}\r\n            >\r\n                Zapłać online\r\n                </Button>\r\n            </form>}\r\n        </div>}\r\n            {!available && <div>\r\n                <h2 style={{marginTop: \"5em\"}}>{message ? message : 'Brak możliwości rezerwacji'}</h2>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SpecialReservation\r\n"],"sourceRoot":""}